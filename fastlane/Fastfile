# frozen_string_literal: true

# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version '2.96.0'

default_platform :ios

platform :ios do
  before_all do |lane|
    # For betas, before all, check if we have a beta release description
    if lane.to_s == 'betas'
      what_s_new = what_s_new_for_beta
      if what_s_new.empty?
        UI.user_error!('Whoops, WhatsNew-beta.json has no release note for ' + tag_version + '.')
      end
    end

    if cleaned_lane_condition(lane)
      ensure_git_status_clean
      Dir.chdir('..') { sh 'make bootstrap' }
    end
  end

  desc 'For each BUs, build a new nightly on App Center, with a new build number, greater than the old nightly build number'
  lane :nightlies do
    appcenter_build_number = latest_appcenter_build_number(
      appcenter_nightly_names
    )
    increment_build_number(
      build_number: appcenter_build_number + 1
    )

    branch_name = git_branch_name

    notify_build_number_to_ci(nightly_build_name_suffix(branch_name))

    changelog = default_changelog_for_nightlies(nil)

    schemes.each_index do |index|
      build_lane(
        configuration: 'Nightly',
        scheme: schemes[index],
        display_name_suffix: nighlty_display_name_suffix(branch_name),
        version_suffix: nightly_version_suffix(branch_name)
      )

      appcenter_lane(
        appname: appcenter_nightly_names[index],
        destinations: ENV['PLAY_NIGHTLY_APPCENTER_DESTINATIONS'],
        notes: changelog
      )

      clean_build_artifacts
    end

    save_last_nightlies_success_git_commit_hash(nil)
  end

  desc 'For each BUs, build a new beta on App Center with the current build number. If we\'re not in a release or hotfix process (master, release/* or hotfix/*), tag the current version on the repository and bump the build number'
  lane :betas do
    notify_build_number_to_ci(nil)

    schemes.each_index do |index|
      build_lane(
        configuration: 'Beta',
        scheme: schemes[index],
        display_name_suffix: ' ðŸŽ¯',
        version_suffix: '-beta'
      )

      appcenter_lane(
        appname: appcenter_beta_names[index],
        destinations: ENV['PLAY_BETA_APPCENTER_DESTINATIONS'],
        notes: what_s_new_for_beta,
        notify_testers: true
      )

      clean_build_artifacts
    end

    bump_build_number_beta_workflow
  end

  desc 'SWI: Upload a new build (bitcode) on AppStore Connect with the current build number.'
  lane :swiAppStoreUpload do
    testflight_lane(scheme: 'Play SWI')
  end

  desc 'SRF: Upload a new build (bitcode) on AppStore Connect with the current build number.'
  lane :srfAppStoreUpload do
    testflight_lane(scheme: 'Play SRF')
  end

  desc 'RTS: Upload a new build (bitcode) on AppStore Connect with the current build number.'
  lane :rtsAppStoreUpload do
    testflight_lane(scheme: 'Play RTS')
  end

  desc 'RSI: Upload a new build (bitcode) on AppStore Connect with the current build number.'
  lane :rsiAppStoreUpload do
    testflight_lane(scheme: 'Play RSI')
  end

  desc 'RTR: Upload a new build (bitcode) on AppStore Connect with the current build number.'
  lane :rtrAppStoreUpload do
    testflight_lane(scheme: 'Play RTR')
  end

  desc 'Send latest dSYMs to App Center. Optional \'version\' or \'min_version\' parameters.'
  lane :dSYMs do |options|
    min_version = options[:min_version]
    version = options[:version]

    options = ''
    options += ' min_version:' + min_version if min_version
    options += ' version:' + version if version

    sh 'bundle exec fastlane ios swiDSYMs' + options
    sh 'bundle exec fastlane ios srfDSYMs' + options
    sh 'bundle exec fastlane ios rtsDSYMs' + options
    sh 'bundle exec fastlane ios rsiDSYMs' + options
    sh 'bundle exec fastlane ios rtrDSYMs' + options
  end

  desc 'SWI: Send latest dSYMs to App Center, with same parameters.'
  lane :swiDSYMs do |options|
    update_dsyms(nil, ENV['PLAY_SWI_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'SFR: Send latest dSYMs to App Center, with same parameters.'
  lane :srfDSYMs do |options|
    update_dsyms(nil, ENV['PLAY_SRF_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'RTS: Send latest dSYMs to App Center, with same parameters.'
  lane :rtsDSYMs do |options|
    update_dsyms(nil, ENV['PLAY_RTS_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'RSI: Send latest dSYMs to App Center, with same parameters.'
  lane :rsiDSYMs do |options|
    update_dsyms(nil, ENV['PLAY_RSI_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'RTR: Send latest dSYMs to App Center, with same parameters.'
  lane :rtrDSYMs do |options|
    update_dsyms(nil, ENV['PLAY_RTR_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'SWI: Make screenshots and overwrite on AppStoreConnect.'
  lane :swiScreenshots do
    screenshots('Play SWI screenshots', ['en-US'])
    upload_screenshots(nil)
  end

  desc 'SRF: Make screenshots and overwrite on AppStoreConnect.'
  lane :srfScreenshots do
    screenshots('Play SRF screenshots', ['de-DE'])
    upload_screenshots(nil)
  end

  desc 'RTS: Make screenshots and overwrite on AppStoreConnect.'
  lane :rtsScreenshots do
    screenshots('Play RTS screenshots', ['fr-FR'])
    upload_screenshots(nil)
  end

  desc 'RSI: Make screenshots and overwrite on AppStoreConnect.'
  lane :rsiScreenshots do
    screenshots('Play RSI screenshots', ['it'])
    upload_screenshots(nil)
  end

  desc 'RTR: Make screenshots and overwrite on AppStoreConnect.'
  lane :rtrScreenshots do
    screenshots('Play RTR screenshots', ['de-DE'])
    upload_screenshots(nil)
  end

  desc 'Build, upload to TestFlight'
  private_lane :testflight_lane do |options|
    scheme = options[:scheme]

    build_lane(
      configuration: 'AppStore',
      scheme: scheme,
      export_to_appstore: true
    )

    pilot(
      skip_waiting_for_build_processing: true
    )

    clean_build_artifacts
  end

  desc 'Build for a scheme and a configuration'
  private_lane :build_lane do |options|
    options[:export_to_appstore] ||= false
    options[:display_name_suffix] ||= ''
    options[:version_suffix] ||= ''

    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    options[:team_id] = team_id
    lane_name = lane_context[SharedValues::LANE_NAME]
    output_directory = 'fastlane/export/' + lane_name + '/'
    gym(
      configuration: options[:configuration],
      scheme: options[:scheme],
      silent: true,
      clean: true,
      xcargs: srg_xcargs(options),
      export_method: options[:export_to_appstore] ? 'app-store' : 'enterprise',
      include_bitcode: options[:export_to_appstore],
      export_team_id: options[:team_id],
      output_directory: output_directory
    )
  end

  desc 'Upload a build on App Center or just a dSYM file.'
  private_lane :appcenter_lane do |options|
    options[:notify_testers] ||= false

    if options[:upload_dsym]
      appcenter_upload(
        api_token: ENV['PLAY_APPCENTER_TOKEN'],
        owner_type: 'organization',
        owner_name: ENV['PLAY_APPCENTER_OWNER'],
        app_name: options[:appname],
        release_notes: options[:notes],
        upload_dsym_only: true,
        dsym: options[:upload_dsym]
      )
    else
      appcenter_upload(
        api_token: ENV['PLAY_APPCENTER_TOKEN'],
        owner_type: 'organization',
        owner_name: ENV['PLAY_APPCENTER_OWNER'],
        app_name: options[:appname],
        release_notes: options[:notes],
        destination_type: 'group',
        destinations: options[:destinations],
        notify_testers: options[:notify_testers]
      )
    end
  end

  # Share build number to the continuous integration
  def notify_build_number_to_ci(suffix)
    return unless ENV['TEAMCITY_VERSION']

    suffix ||= ''

    displayed_build_number = xcode_marketing_version
    displayed_build_number += '-' + get_build_number
    displayed_build_number += suffix
    puts '##teamcity[buildNumber \'' + displayed_build_number + '\']'
  end

  # Returns current build number on App Center
  def latest_appcenter_build_number(app_names)
    build_number = 0
    app_names.each_index do |index|
      number = Integer(appcenter_fetch_version_number(
        api_token: ENV['PLAY_APPCENTER_TOKEN'],
        owner_name: ENV['PLAY_APPCENTER_OWNER'],
        app_name: app_names[index]
      )['build_number'])

      build_number = number unless build_number >= number
    end
    build_number
  end

  after_all do |lane|
    reset_git_repo(skip_clean: true) if cleaned_lane_condition(lane)

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane|
    if cleaned_lane_condition(lane)
      clean_build_artifacts
      reset_git_repo(skip_clean: true, force: true)
    end

    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

def cleaned_lane_condition(lane)
  (lane.to_s != 'devLane') && (!lane.to_s.downcase.include? 'dsym')
end

def schemes
  ['Play SWI', 'Play RTS', 'Play SRF', 'Play RSI', 'Play RTR']
end

def appcenter_nightly_names
  [ENV['PLAY_SWI_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_RTS_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_SRF_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_RSI_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_RTR_NIGHTLY_APPCENTER_APPNAME']]
end

def appcenter_beta_names
  [ENV['PLAY_SWI_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_RTS_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_SRF_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_RSI_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_RTR_BETA_APPCENTER_APPNAME']]
end

# Returns current tag version
def tag_version
  build_number = get_build_number
  marketing_version = xcode_marketing_version
  marketing_version + '-' + build_number
end

# Returns the what's new text from WhatsNew-beta.json file in the repository
def what_s_new_for_beta
  file = File.open('../WhatsNew-beta.json', 'r')
  json = JSON.parse(file.read)
  file.close
  what_s_new = json[tag_version]
  what_s_new || ''
end

def srg_xcargs(options)
  export_to_appstore = options[:export_to_appstore] || false
  xcargs = export_to_appstore ? 'ENABLE_BITCODE=YES' : 'ENABLE_BITCODE=NO'
  xcargs += " BUNDLE_DISPLAY_NAME_SUFFIX='#{options[:display_name_suffix]}'"
  xcargs += " MARKETING_VERSION_SUFFIX='#{options[:version_suffix]}'"
  xcargs += " DEVELOPMENT_TEAM='#{options[:team_id]}'"
  xcargs + ' -allowProvisioningUpdates'
end

def nighlty_display_name_suffix(branch_name)
  nighlty_display_name_suffix = ' ðŸŒ™'
  nighlty_display_name_suffix = ' ðŸŒ¿' if branch_name.include? 'feature/'
  nighlty_display_name_suffix
end

def nightly_version_suffix(branch_name)
  nightly_version_suffix = '-nightly'
  if branch_name.include? 'feature/'
    nightly_version_suffix += '+' + branch_name.sub('feature/', '').strip
  end
  nightly_version_suffix
end

def nightly_build_name_suffix(branch_name)
  nightly_build_name_suffix = ''
  if branch_name.include? 'feature/'
    nightly_build_name_suffix = '+' + branch_name.sub('feature/', '').strip
  end
  nightly_build_name_suffix
end

# Return a default changelog for nightlies
def default_changelog_for_nightlies(platform)
  last_commit_hash = last_nightlies_success_git_commit_hash(platform)
  last_commit_hash = 'HEAD^^^^^' if last_commit_hash.length < 12

  changelog = changelog_from_git_commits(
    between: [last_commit_hash, 'HEAD'],
    pretty: '- %s'
  )

  # HAX: strip emoji from changelog
  changelog = changelog ? changelog.sub(/[\u{1F300}-\u{1F6FF}]/, '').lstrip : ''
  changelog = 'No change log found for this build.' if changelog.length.zero?
  Actions.lane_context[SharedValues::FL_CHANGELOG] = changelog
end

# Save the git commit hash in a local text file for nightlies
def save_last_nightlies_success_git_commit_hash(platform)
  last = last_git_commit
  unique_file = platform ? platform.downcase + '-' : ''
  file_name = 'last-' + unique_file + 'nightlies-success-git-commit-hash.txt'
  File.open(file_name, 'w') { |f| f.write(last[:commit_hash]) }
  last[:commit_hash]
end

# Read the git commit hash in a local text file for nightlies
def last_nightlies_success_git_commit_hash(platform)
  unique_file = platform ? platform.downcase + '-' : ''
  file_name = 'last-' + unique_file + 'nightlies-success-git-commit-hash.txt'
  file = File.open(file_name, 'a+')
  nightlies_success_git_commit_hash = file.read
  file.close
  nightlies_success_git_commit_hash
end

# Returns the marketing version, without suffix
def xcode_marketing_version
  marketing_version = nil
  Dir.chdir('..') do
    command = 'xcodebuild -showBuildSettings | grep "MARKETING_VERSION ="'
    marketing_version = xcodebuid_grep_output sh command
  end
  marketing_version ['MARKETING_VERSION ='] = ''
  marketing_version.gsub(/\s+/, '').chomp
end

# Returns clean xcodebuid grep output, without warning and errors
def xcodebuid_grep_output(output)
  line_count = output.lines.count
  output.split(/\n/) [line_count - 1]
end

# Update dSYMs from AppStore to App Center.
def update_dsyms(platform, appcenter_appname, options)
  platform ||= 'ios'
  output_directory = 'fastlane/export/' + lane_context[SharedValues::LANE_NAME]
  Dir.chdir('..') { FileUtils.mkdir_p(output_directory) }

  min_version = options ? options[:min_version] : nil
  version = options ? options[:version] : nil
  download_appstore_dsyms(platform, min_version, version, output_directory)
  upload_appcenter_dsyms(appcenter_appname)
end

def download_appstore_dsyms(platform, min_version, version, output_directory)
  platform ||= 'ios'
  version ||= 'latest'
  download_dsyms(
    platform: platform,
    min_version: min_version,
    version: !min_version ? version : nil,
    output_directory: output_directory
  )
end

def upload_appcenter_dsyms(appcenter_appname)
  lane_context[SharedValues::DSYM_PATHS]&.each do |dsym|
    appcenter_lane(
      appname: appcenter_appname,
      notes: 'DSYMs from AppStore Connect (via fastlane).',
      upload_dsym: dsym
    )
  end
end

# Create screenshots for AppStoreConnect.
def screenshots(scheme, languages)
  output_directory = 'fastlane/export/' + lane_context[SharedValues::LANE_NAME]
  Dir.chdir('..') { FileUtils.mkdir_p(output_directory) }

  snapshot(
    scheme: scheme,
    languages: languages,
    output_directory: output_directory
  )
end

def upload_screenshots(platform)
  platform ||= 'ios'

  deliver(
    platform: platform,
    app_version: xcode_marketing_version,
    skip_binary_upload: true,
    skip_metadata: true,
    overwrite_screenshots: true
  )
end

# Beta workflow: tag the new beta, bump build number and push to the repo,
# only if we're not in a release process.
def bump_build_number_beta_workflow
  branch_name = git_branch_name
  is_in_release_process = (branch_name.include? 'master')
  is_in_release_process ||= (branch_name.include? 'release/')
  is_in_release_process ||= (branch_name.include? 'hotfix/')

  return if is_in_release_process

  add_git_tag(tag: tag_version)
  bump_build_number_commit
  push_to_git_remote
end

def bump_build_number_commit
  build_number = increment_build_number
  commit_version_bump(
    xcodeproj: 'PlaySRG.xcodeproj',
    message: 'Bump build number to ' + build_number,
    ignore: /.+/
  )
end

def git_branch_name
  sh "git branch | grep \\* | cut -d ' ' -f2"
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
