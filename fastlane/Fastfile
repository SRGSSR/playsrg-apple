# frozen_string_literal: true

# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version '2.96.0'

default_platform :ios

platform :ios do
  before_all do |lane, options|
    platform = lane.to_s.downcase.include?('tvos') ? 'tvOS' : 'iOS'

    # For betas, before all, check if we have a beta release description
    if lane.to_s.downcase.include?('betas') ||
       ['appstore', 'beta'].all? { |i| lane.to_s.downcase.include? i }

      tag_version = options[:tag_version] || tag_version(platform)
      what_s_new = what_s_new_for_beta(platform, tag_version)
      if what_s_new.empty?
        UI.user_error!("WhatsNew-#{platform}-beta.json has no release notes for #{tag_version}.")
      end
    end

    xcversion(version: '~> 14')

    if cleaned_lane_condition(lane)
      ensure_git_status_clean(show_uncommitted_changes: true, show_diff: true)
      clean_derived_data unless skip_clean_derived_data
    end
  end

  #
  # Public lanes
  #

  # Nightlies

  desc 'Builds a new iOS nightly on App Center.'
  lane :iOSnightliesAppCenter do
    platform = 'iOS'
    service = 'AppCenter'

    build_number = latest_appcenter_build_number(appcenter_ios_nightly_appcenter_names)
    xcode_override_build_number(platform, build_number + 1)

    tag_version = tag_version(platform)

    branch_name = git_branch_name

    notify_version_to_ci(platform, nil, nightly_build_name(branch_name))

    ios_application_schemes.each_index do |index|
      build_lane(
        configuration: 'Nightly_AppCenter',
        scheme: ios_application_schemes[index],
        display_name_suffix: nightly_display_name_suffix(branch_name),
        version_suffix: nightly_version_suffix(branch_name),
        build_name: nightly_build_name(branch_name),
        platform: platform
      )

      appcenter_lane(
        appname: appcenter_ios_nightly_appcenter_names[index],
        destinations: ENV['PLAY_NIGHTLY_APPCENTER_DESTINATIONS'],
        notes: nightly_changelog(platform, service)
      )

      clean_build_artifacts

      UI.message "#{ios_application_schemes[index]} (#{platform} Nightly #{tag_version}) uploaded and distributed. ✅"
    end

    save_last_nightlies_success_git_commit_hash(platform, service)
  end

  desc 'Builds a new tvOS nightly on App Store Connect and waits for build processing.'
  lane :tvOSnightlies do
    testflight_nightlies(platform: 'tvOS')
  end

  desc 'Sends latest tvOS nightly dSYMs to App Center. Optional \'build_number\', \'version\' or \'min_version\' parameters.'
  lane :tvOSnightlyDSYMs do |options|
    tvos_application_schemes.each_index do |index|
      app_identifier = appstore_nightly_identifiers[index]
      appcenter_appname = appcenter_tv_nightly_names[index]
      update_dsyms(app_identifier, 'tvOS', appcenter_appname, options)
    end
  end

  desc 'Builds a new iOS nightly on App Store Connect and waits for build processing.'
  lane :iOSnightlies do
    testflight_nightlies(platform: 'iOS')
  end

  desc 'Sends latest iOS nightly dSYMs to App Center. Optional \'build_number\', \'version\' or \'min_version\' parameters.'
  lane :iOSnightlyDSYMs do |options|
    ios_application_schemes.each_index do |index|
      app_identifier = appstore_nightly_identifiers[index]
      appcenter_appname = appcenter_ios_nightly_names[index]
      update_dsyms(app_identifier, 'iOS', appcenter_appname, options)
    end
  end

  desc 'Adds a nightly TestFlight tester (email required)'
  lane :nightlyTester do |options|
    addTestFlightTester(
      email: options[:email],
      first_name: options[:first_name],
      last_name: options[:last_name],
      app_identifiers: appstore_nightly_identifiers,
      group_name: ENV['ITUNES_CONNECT_TF_GROUPS']
    )
  end

  # Betas

  desc 'Builds an iOS beta on App Center with the current build number. On the develop branch attempts to tag the current version, then bumps the build number and pushes.'
  lane :iOSbetasAppCenter do
    platform = 'iOS'

    notify_version_to_ci(platform, nil, nil)

    tag_version = tag_version(platform)

    ios_application_schemes.each_index do |index|
      build_lane(
        configuration: 'Beta_AppCenter',
        scheme: ios_application_schemes[index],
        display_name_suffix: ' 🎯',
        version_suffix: '-beta',
        platform: platform
      )

      appcenter_lane(
        appname: appcenter_ios_beta_appcenter_names[index],
        destinations: ENV['PLAY_BETA_APPCENTER_DESTINATIONS'],
        notes: what_s_new_for_beta(platform, nil),
        notify_testers: true
      )

      clean_build_artifacts

      UI.message "#{ios_application_schemes[index]} (#{platform} Beta #{tag_version}) uploaded and distributed. ✅"
    end

    bump_build_number_beta_workflow(platform)
  end

  desc 'Builds a tvOS beta on App Store Connect with the current build number and waits for build processing. On the develop branch attempts to tag the current version, then bumps the build number and pushes.'
  lane :tvOSbetas do
    testflight_betas(platform: 'tvOS')
  end

  desc 'Sends latest tvOS beta dSYMs to App Center. Optional \'build_number\', \'version\' or \'min_version\' parameters.'
  lane :tvOSbetaDSYMs do |options|
    tvos_application_schemes.each_index do |index|
      app_identifier = appstore_beta_identifiers[index]
      appcenter_appname = appcenter_tv_beta_names[index]
      update_dsyms(app_identifier, 'tvOS', appcenter_appname, options)
    end
  end

  desc 'Builds an iOS beta on App Store Connect with the current build number and waits for build processing. On the develop branch attempts to tag the current version, then bumps the build number and pushes.'
  lane :iOSbetas do
    testflight_betas(platform: 'iOS')
  end

  desc 'Sends latest iOS beta dSYMs to App Center. Optional \'build_number\', \'version\' or \'min_version\' parameters.'
  lane :iOSbetaDSYMs do |options|
    ios_application_schemes.each_index do |index|
      app_identifier = appstore_beta_identifiers[index]
      appcenter_appname = appcenter_ios_beta_names[index]
      update_dsyms(app_identifier, 'iOS', appcenter_appname, options)
    end
  end

  desc 'Adds a beta TestFlight tester (email required)'
  lane :betaTester do |options|
    addTestFlightTester(
      email: options[:email],
      first_name: options[:first_name],
      last_name: options[:last_name],
      app_identifiers: appstore_beta_identifiers,
      group_name: ENV['ITUNES_CONNECT_TF_GROUPS']
    )
  end

  # App Store betas

  desc 'Applies iOSAppStoreUploadBetas, iOSAppStoreDistributePrivateBetas and iOSAppStoreDSYMs.'
  lane :iOSAppStoreBetas do
    sh 'bundle exec fastlane ios iOSAppStoreUploadBetas'
    sh 'bundle exec fastlane ios iOSAppStoreDistributePrivateBetas'
    sh 'bundle exec fastlane ios iOSAppStoreDSYMs'
  end

  desc 'Uploads an iOS App Store beta on App Store Connect with the current build number.'
  lane :iOSAppStoreUploadBetas do
    business_units.map do |business_unit|
      sh "bundle exec fastlane ios iOS#{business_unit.downcase}AppStoreUploadBeta"
    end
  end

  desc 'Distributes to private groups an iOS App Store beta on App Store Connect with the current build number. Optional \'tag_version\' parameter (X.Y.Z-build_number).'
  lane :iOSAppStoreDistributePrivateBetas do |options|
    tag_version = options[:tag_version]

    options = ''
    options += " tag_version:#{tag_version}" if tag_version

    business_units.map do |business_unit|
      business_unit = business_unit.downcase
      sh "bundle exec fastlane ios iOS#{business_unit}AppStoreDistributePrivateBeta#{options}"
    end
  end

  desc 'Distributes to public groups an iOS App Store beta on App Store Connect with the current build number. Optional \'tag_version\' parameter (X.Y.Z-build_number).'
  lane :iOSAppStoreDistributePublicBetas do |options|
    tag_version = options[:tag_version]

    options = ''
    options += " tag_version:#{tag_version}" if tag_version

    business_units.map do |business_unit|
      business_unit = business_unit.downcase
      sh "bundle exec fastlane ios iOS#{business_unit}AppStoreDistributePublicBeta#{options}"
    end
  end

  desc 'Sends latest iOS App Store dSYMs to App Center. Optional \'build_number\', \'version\' or \'min_version\' parameters.'
  lane :iOSAppStoreDSYMs do |options|
    min_version = options[:min_version]
    version = options[:version]
    build_number = options[:build_number]

    options = ''
    options += " min_version:#{min_version}" if min_version
    options += " version:#{version}" if version
    options += " build_number:#{build_number}" if build_number

    business_units.map do |business_unit|
      sh "bundle exec fastlane ios iOS#{business_unit.downcase}AppStoreDSYMs#{options}"
    end
  end

  desc 'Applies tvOSAppStoreUploadBetas, tvOSAppStoreDistributePrivateBetas and tvOSAppStoreDSYMs.'
  lane :tvOSAppStoreBetas do
    sh 'bundle exec fastlane ios tvOSAppStoreUploadBetas'
    sh 'bundle exec fastlane ios tvOSAppStoreDistributePrivateBetas'
    sh 'bundle exec fastlane ios tvOSAppStoreDSYMs'
  end

  desc 'Uploads a tvOS build on App Store Connect with the current build number.'
  lane :tvOSAppStoreUploadBetas do
    business_units.map do |business_unit|
      sh "bundle exec fastlane ios tvOS#{business_unit.downcase}AppStoreUploadBeta"
    end
  end

  desc 'Distributes to private groups a tvOS App Store beta on App Store Connect with the current build number. Optional \'tag_version\' parameter (X.Y.Z-build_number).'
  lane :tvOSAppStoreDistributePrivateBetas do |options|
    tag_version = options[:tag_version]

    options = ''
    options += " tag_version:#{tag_version}" if tag_version

    business_units.map do |business_unit|
      business_unit = business_unit.downcase
      sh "bundle exec fastlane ios tvOS#{business_unit}AppStoreDistributePrivateBeta#{options}"
    end
  end

  desc 'Distributes to public groups a tvOS App Store beta on App Store Connect with the current build number. Optional \'tag_version\' parameter (X.Y.Z-build_number).'
  lane :tvOSAppStoreDistributePublicBetas do |options|
    tag_version = options[:tag_version]

    options = ''
    options += " tag_version:#{tag_version}" if tag_version

    business_units.map do |business_unit|
      business_unit = business_unit.downcase
      sh "bundle exec fastlane ios tvOS#{business_unit}AppStoreDistributePublicBeta#{options}"
    end
  end

  desc 'Sends latest tvOS dSYMs to App Center. Optional \'build_number\', \'version\' or \'min_version\' parameters.'
  lane :tvOSAppStoreDSYMs do |options|
    min_version = options[:min_version]
    version = options[:version]
    build_number = options[:build_number]

    options = ''
    options += " min_version:#{min_version}" if min_version
    options += " version:#{version}" if version
    options += " build_number:#{build_number}" if build_number

    business_units.map do |business_unit|
      sh "bundle exec fastlane ios tvOS#{business_unit.downcase}AppStoreDSYMs#{options}"
    end
  end

  # Individual iOS screenshots

  desc 'RSI: Makes iOS screenshots and replaces current ones on App Store Connect.'
  lane :iOSrsiScreenshots do
    platform = 'iOS'

    screenshots(platform, 'RSI')
    upload_screenshots(platform)
  end

  desc 'RTR: Makes iOS screenshots and replaces current ones on App Store Connect.'
  lane :iOSrtrScreenshots do
    platform = 'iOS'

    screenshots(platform, 'RTR')
    upload_screenshots(platform)
  end

  desc 'RTS: Makes iOS screenshots and replaces current ones on App Store Connect.'
  lane :iOSrtsScreenshots do
    platform = 'iOS'

    screenshots(platform, 'RTS')
    upload_screenshots(platform)
  end

  desc 'SRF: Makes iOS screenshots. !!! No replacement made on App Store Connect !!!'
  lane :iOSsrfScreenshots do
    platform = 'iOS'

    screenshots(platform, 'SRF')
    # upload_screenshots(platform) # Don't erase existing ones, from SRF marketing team.
  end

  desc 'SWI: Makes iOS screenshots and replaces current ones on App Store Connect.'
  lane :iOSswiScreenshots do
    platform = 'iOS'

    screenshots(platform, 'SWI')
    upload_screenshots(platform)
  end

  # Individual iOS App Store beta uploads

  desc 'RSI only: See \'iOSAppStoreUploadBetas\' lane.'
  lane :iOSrsiAppStoreUploadBeta do
    testflight_appstore_upload_beta(platform: 'iOS', bu: 'RSI')
  end

  desc 'RTR only: See \'iOSAppStoreUploadBetas\' lane.'
  lane :iOSrtrAppStoreUploadBeta do
    testflight_appstore_upload_beta(platform: 'iOS', bu: 'RTR')
  end

  desc 'RTS only: See \'iOSAppStoreUploadBetas\' lane.'
  lane :iOSrtsAppStoreUploadBeta do
    testflight_appstore_upload_beta(platform: 'iOS', bu: 'RTS')
  end

  desc 'SRF only: See \'iOSAppStoreUploadBetas\' lane.'
  lane :iOSsrfAppStoreUploadBeta do
    testflight_appstore_upload_beta(platform: 'iOS', bu: 'SRF')
  end

  desc 'SWI only: See \'iOSAppStoreUploadBetas\' lane.'
  lane :iOSswiAppStoreUploadBeta do
    testflight_appstore_upload_beta(platform: 'iOS', bu: 'SWI')
  end

  # Individual iOS App Store beta private distributions

  desc 'RSI only: See \'iOSAppStoreDistributePrivateBetas\' lane.'
  lane :iOSrsiAppStoreDistributePrivateBeta do |options|
    testflight_appstore_distribute_private_beta(
      platform: 'iOS', bu: 'RSI', tag_version: options[:tag_version]
    )
  end

  desc 'RTR only: See \'iOSAppStoreDistributePrivateBetas\' lane.'
  lane :iOSrtrAppStoreDistributePrivateBeta do |options|
    testflight_appstore_distribute_private_beta(
      platform: 'iOS', bu: 'RTR', tag_version: options[:tag_version]
    )
  end

  desc 'RTS only: See \'iOSAppStoreDistributePrivateBetas\' lane.'
  lane :iOSrtsAppStoreDistributePrivateBeta do |options|
    testflight_appstore_distribute_private_beta(
      platform: 'iOS', bu: 'RTS', tag_version: options[:tag_version]
    )
  end

  desc 'SRF only: See \'iOSAppStoreDistributePrivateBetas\' lane.'
  lane :iOSsrfAppStoreDistributePrivateBeta do |options|
    testflight_appstore_distribute_private_beta(
      platform: 'iOS', bu: 'SRF', tag_version: options[:tag_version]
    )
  end

  desc 'SWI only: See \'iOSAppStoreDistributePrivateBetas\' lane.'
  lane :iOSswiAppStoreDistributePrivateBeta do |options|
    testflight_appstore_distribute_private_beta(
      platform: 'iOS', bu: 'SWI', tag_version: options[:tag_version]
    )
  end

  # Individual iOS App Store beta public distributions

  desc 'RSI only: See \'iOSAppStoreDistributePublicBeta\' lane.'
  lane :iOSrsiAppStoreDistributePublicBeta do |options|
    testflight_appstore_distribute_public_beta(
      platform: 'iOS', bu: 'RSI', tag_version: options[:tag_version]
    )
  end

  desc 'RTR only: See \'iOSAppStoreDistributePublicBeta\' lane.'
  lane :iOSrtrAppStoreDistributePublicBeta do |options|
    testflight_appstore_distribute_public_beta(
      platform: 'iOS', bu: 'RTR', tag_version: options[:tag_version]
    )
  end

  desc 'RTS only: See \'iOSAppStoreDistributePublicBeta\' lane.'
  lane :iOSrtsAppStoreDistributePublicBeta do |options|
    testflight_appstore_distribute_public_beta(
      platform: 'iOS', bu: 'RTS', tag_version: options[:tag_version]
    )
  end

  desc 'SRF only: See \'iOSAppStoreDistributePublicBeta\' lane.'
  lane :iOSsrfAppStoreDistributePublicBeta do |options|
    testflight_appstore_distribute_public_beta(
      platform: 'iOS', bu: 'SRF', tag_version: options[:tag_version]
    )
  end

  desc 'SWI only: See \'iOSAppStoreDistributePublicBeta\' lane.'
  lane :iOSswiAppStoreDistributePublicBeta do |options|
    testflight_appstore_distribute_public_beta(
      platform: 'iOS', bu: 'SWI', tag_version: options[:tag_version]
    )
  end

  # Individual iOS App Store beta dSYMs uploads

  desc 'RSI only: See \'iOSAppStoreDSYMs\' lane.'
  lane :iOSrsiAppStoreDSYMs do |options|
    update_dsyms(nil, 'iOS', ENV['PLAY_RSI_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'RTR only: See \'iOSAppStoreDSYMs\' lane.'
  lane :iOSrtrAppStoreDSYMs do |options|
    update_dsyms(nil, 'iOS', ENV['PLAY_RTR_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'RTS only: See \'iOSAppStoreDSYMs\' lane.'
  lane :iOSrtsAppStoreDSYMs do |options|
    update_dsyms(nil, 'iOS', ENV['PLAY_RTS_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'SFR only: See \'iOSAppStoreDSYMs\' lane.'
  lane :iOSsrfAppStoreDSYMs do |options|
    update_dsyms(nil, 'iOS', ENV['PLAY_SRF_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'SWI only: See \'iOSAppStoreDSYMs\' lane.'
  lane :iOSswiAppStoreDSYMs do |options|
    update_dsyms(nil, 'iOS', ENV['PLAY_SWI_APPSTORE_APPCENTER_APPNAME'], options)
  end

  # Individual tvOS screenshots

  desc 'RSI: Makes tvOS screenshots and replaces current ones on App Store Connect.'
  lane :tvOSrsiScreenshots do
    platform = 'tvOS'

    screenshots(platform, 'RSI')
    upload_screenshots(platform)
  end

  desc 'RTR: Makes tvOS screenshots and replaces current ones on App Store Connect.'
  lane :tvOSrtrScreenshots do
    platform = 'tvOS'

    screenshots(platform, 'RTR')
    upload_screenshots(platform)
  end

  desc 'RTS: Makes tvOS screenshots and replaces current ones on App Store Connect.'
  lane :tvOSrtsScreenshots do
    platform = 'tvOS'

    screenshots(platform, 'RTS')
    upload_screenshots(platform)
  end

  desc 'SRF: Makes tvOS screenshots and replaces current ones on App Store Connect.'
  lane :tvOSsrfScreenshots do
    platform = 'tvOS'

    screenshots(platform, 'SRF')
    upload_screenshots(platform)
  end

  desc 'SWI: Makes tvOS screenshots and replaces current ones on App Store Connect.'
  lane :tvOSswiScreenshots do
    platform = 'tvOS'

    screenshots(platform, 'SWI')
    upload_screenshots(platform)
  end

  # Individual tvOS App Store beta uploads

  desc 'RSI only: See \'tvOSAppStoreUploadBetas\' lane.'
  lane :tvOSrsiAppStoreUploadBeta do
    testflight_appstore_upload_beta(platform: 'tvOS', bu: 'RSI')
  end

  desc 'RTR only: See \'tvOSAppStoreUploadBetas\' lane.'
  lane :tvOSrtrAppStoreUploadBeta do
    testflight_appstore_upload_beta(platform: 'tvOS', bu: 'RTR')
  end

  desc 'RTS only: See \'tvOSAppStoreUploadBetas\' lane.'
  lane :tvOSrtsAppStoreUploadBeta do
    testflight_appstore_upload_beta(platform: 'tvOS', bu: 'RTS')
  end

  desc 'SRF only: See \'tvOSAppStoreUploadBetas\' lane.'
  lane :tvOSsrfAppStoreUploadBeta do
    testflight_appstore_upload_beta(platform: 'tvOS', bu: 'SRF')
  end

  desc 'SWI only: See \'tvOSAppStoreUploadBetas\' lane.'
  lane :tvOSswiAppStoreUploadBeta do
    testflight_appstore_upload_beta(platform: 'tvOS', bu: 'SWI')
  end

  # Individual tvOS App Store beta private distributions

  desc 'RSI only: See \'tvOSAppStoreDistributePrivateBetas\' lane.'
  lane :tvOSrsiAppStoreDistributePrivateBeta do |options|
    testflight_appstore_distribute_private_beta(
      platform: 'tvOS', bu: 'RSI', tag_version: options[:tag_version]
    )
  end

  desc 'RTR only: See \'tvOSAppStoreDistributePrivateBetas\' lane.'
  lane :tvOSrtrAppStoreDistributePrivateBeta do |options|
    testflight_appstore_distribute_private_beta(
      platform: 'tvOS', bu: 'RTR', tag_version: options[:tag_version]
    )
  end

  desc 'RTS only: See \'tvOSAppStoreDistributePrivateBetas\' lane.'
  lane :tvOSrtsAppStoreDistributePrivateBeta do |options|
    testflight_appstore_distribute_private_beta(
      platform: 'tvOS', bu: 'RTS', tag_version: options[:tag_version]
    )
  end

  desc 'SRF only: See \'tvOSAppStoreDistributePrivateBetas\' lane.'
  lane :tvOSsrfAppStoreDistributePrivateBeta do |options|
    testflight_appstore_distribute_private_beta(
      platform: 'tvOS', bu: 'SRF', tag_version: options[:tag_version]
    )
  end

  desc 'SWI only: See \'tvOSAppStoreDistributePrivateBetas\' lane.'
  lane :tvOSswiAppStoreDistributePrivateBeta do |options|
    testflight_appstore_distribute_private_beta(
      platform: 'tvOS', bu: 'SWI', tag_version: options[:tag_version]
    )
  end

  # Individual tvOS App Store beta public distributions

  desc 'RSI only: See \'tvOSAppStoreDistributePublicBetas\' lane.'
  lane :tvOSrsiAppStoreDistributePublicBeta do |options|
    testflight_appstore_distribute_public_beta(
      platform: 'tvOS', bu: 'RSI', tag_version: options[:tag_version]
    )
  end

  desc 'RTR only: See \'tvOSAppStoreDistributePublicBetas\' lane.'
  lane :tvOSrtrAppStoreDistributePublicBeta do |options|
    testflight_appstore_distribute_public_beta(
      platform: 'tvOS', bu: 'RTR', tag_version: options[:tag_version]
    )
  end

  desc 'RTS only: See \'tvOSAppStoreDistributePublicBetas\' lane.'
  lane :tvOSrtsAppStoreDistributePublicBeta do |options|
    testflight_appstore_distribute_public_beta(
      platform: 'tvOS', bu: 'RTS', tag_version: options[:tag_version]
    )
  end

  desc 'SRF only: See \'tvOSAppStoreDistributePublicBetas\' lane.'
  lane :tvOSsrfAppStoreDistributePublicBeta do |options|
    testflight_appstore_distribute_public_beta(
      platform: 'tvOS', bu: 'SRF', tag_version: options[:tag_version]
    )
  end

  desc 'SWI only: See \'tvOSAppStoreDistributePublicBetas\' lane.'
  lane :tvOSswiAppStoreDistributePublicBeta do |options|
    testflight_appstore_distribute_public_beta(
      platform: 'tvOS', bu: 'SWI', tag_version: options[:tag_version]
    )
  end

  # Individual tvOS App Store beta dSYMs uploads

  desc 'RSI only: See \'tvOSAppStoreDSYMs\' lane.'
  lane :tvOSrsiAppStoreDSYMs do |options|
    update_dsyms(nil, 'tvOS', ENV['PLAY_RSI_TV_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'RTR only: See \'tvOSAppStoreDSYMs\' lane.'
  lane :tvOSrtrAppStoreDSYMs do |options|
    update_dsyms(nil, 'tvOS', ENV['PLAY_RTR_TV_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'RTS only: See \'tvOSAppStoreDSYMs\' lane.'
  lane :tvOSrtsAppStoreDSYMs do |options|
    update_dsyms(nil, 'tvOS', ENV['PLAY_RTS_TV_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'SFR only: See \'tvOSAppStoreDSYMs\' lane.'
  lane :tvOSsrfAppStoreDSYMs do |options|
    update_dsyms(nil, 'tvOS', ENV['PLAY_SRF_TV_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'SWI only: See \'tvOSAppStoreDSYMs\' lane.'
  lane :tvOSswiAppStoreDSYMs do |options|
    update_dsyms(nil, 'tvOS', ENV['PLAY_SWI_TV_APPSTORE_APPCENTER_APPNAME'], options)
  end

  #
  # Private lanes
  #

  desc 'Builds a new nightly on App Store Connect and waits for build processing.'
  private_lane :testflight_nightlies do |options|
    platform = options[:platform] || 'iOS'
    service = 'TestFlight'

    build_number = srg_latest_testflight_build_number(appstore_nightly_identifiers, platform)
    xcode_override_build_number(platform, build_number + 1)

    tag_version = tag_version(platform)

    branch_name = git_branch_name

    notify_version_to_ci(platform, nil, nightly_build_name(branch_name))

    schemes = application_schemes(platform)
    schemes.each_index do |index|
      app_identifier = appstore_nightly_identifiers[index]

      build_lane(
        configuration: 'Nightly',
        scheme: schemes[index],
        display_name_suffix: nightly_display_name_suffix(branch_name),
        version_suffix: nightly_version_suffix(branch_name),
        build_name: nightly_build_name(branch_name),
        platform: platform,
        export_to_appstore: true
      )

      pilot_fast_upload(app_identifier, platform)

      clean_build_artifacts

      UI.message "#{schemes[index]} (#{platform} Nightly #{tag_version}) uploaded. ✅"
    end

    changelog = nightly_changelog(platform, service)
    dsyms_options = { build_number: build_number_from_tag_version(tag_version) }

    schemes.each_index do |index|
      app_identifier = appstore_nightly_identifiers[index]

      pilot_distribute(app_identifier, platform, tag_version, changelog, false)

      UI.message "#{schemes[index]} (#{platform} Nightly #{tag_version}) distributed. ✅"

      appcenter_appname = appcenter_testflight_nightly_names(platform)[index]
      update_dsyms(app_identifier, platform, appcenter_appname, dsyms_options)

      UI.message "#{schemes[index]} (#{platform} Nightly #{tag_version}) dSYM file OK. ✅"
    end

    save_last_nightlies_success_git_commit_hash(platform, service)
  end

  desc 'Builds a beta on App Store Connect with the current build number and waits for build processing. On the develop branch attempts to tag the current version, then bumps the build number and pushes.'
  private_lane :testflight_betas do |options|
    platform = options[:platform] || 'iOS'

    notify_version_to_ci(platform, nil, nil)

    tag_version = tag_version(platform)

    schemes = application_schemes(platform)
    schemes.each_index do |index|
      app_identifier = appstore_beta_identifiers[index]

      can_upload = can_upload_testflight_build(app_identifier, platform, tag_version)
      UI.message("#{schemes[index]} (#{platform} Beta #{tag_version}) already uploaded 🔁 ✅") unless can_upload
      next unless can_upload

      build_lane(
        configuration: 'Beta',
        scheme: schemes[index],
        display_name_suffix: ' 🎯',
        version_suffix: '-beta',
        platform: platform,
        export_to_appstore: true
      )

      pilot_fast_upload(app_identifier, platform)

      clean_build_artifacts

      UI.message "#{schemes[index]} (#{platform} Beta #{tag_version}) uploaded. ✅"
    end

    changelog = what_s_new_for_beta(platform, nil)
    dsyms_options = { build_number: build_number_from_tag_version(tag_version) }

    schemes.each_index do |index|
      app_identifier = appstore_beta_identifiers[index]

      pilot_distribute(app_identifier, platform, tag_version, changelog, false)

      UI.message "#{schemes[index]} (#{platform} Beta #{tag_version}) distributed. ✅"

      appcenter_appname = appcenter_testflight_beta_names(platform)[index]
      update_dsyms(app_identifier, platform, appcenter_appname, dsyms_options)

      UI.message "#{schemes[index]} (#{platform} Beta #{tag_version}) dSYM file OK. ✅"
    end

    bump_build_number_beta_workflow(platform)
  end

  desc 'Builds a new App Store beta on App Store Connect with the current build number and and skips build processing.'
  private_lane :testflight_appstore_upload_beta do |options|
    platform = options[:platform] || 'iOS'
    scheme = application_scheme(platform, options[:bu])

    UI.important('A valid bu option is required to build an App Store beta. Skipping build. ⚠️') unless scheme
    next unless scheme

    notify_version_to_ci(platform, nil, nil)

    tag_version = tag_version(platform)

    can_upload = can_upload_testflight_build(nil, platform, tag_version)
    UI.message("#{scheme} (#{platform} App Store #{tag_version}) already uploaded 🔁 ✅") unless can_upload
    next unless can_upload

    build_lane(
      configuration: 'AppStore',
      scheme: scheme,
      platform: platform,
      export_to_appstore: true
    )

    pilot_fast_upload(nil, platform)

    clean_build_artifacts

    UI.message("#{scheme} (#{platform} App Store #{tag_version}) uploaded ✅")
  end

  desc 'Distributes the App Store beta on App Store Connect with the current build number to private group.'
  private_lane :testflight_appstore_distribute_private_beta do |options|
    platform = options[:platform] || 'iOS'
    tag_version = options[:tag_version] || tag_version(platform)
    scheme = application_scheme(platform, options[:bu])

    UI.important('A valid bu option is required to distribute an App Store beta. Skipping distribution. ⚠️') unless scheme
    next unless scheme

    notify_version_to_ci(platform, tag_version, nil)

    changelog = what_s_new_for_beta(platform, tag_version)
    pilot_distribute(nil, platform, tag_version, changelog, false)

    UI.message "#{scheme} (#{platform} App Store #{tag_version}) distributed to private beta group. ✅"
  end

  desc 'Distributes the App Store beta on App Store Connect with the current build number to public group.'
  private_lane :testflight_appstore_distribute_public_beta do |options|
    platform = options[:platform] || 'iOS'
    tag_version = options[:tag_version] || tag_version(platform)
    scheme = application_scheme(platform, options[:bu])

    UI.important('A valid bu option is required to distribute an App Store beta. Skipping distribution. ⚠️') unless scheme
    next unless scheme

    notify_version_to_ci(platform, tag_version, nil)

    changelog = what_s_new_for_beta(platform, tag_version)
    pilot_distribute(nil, platform, tag_version, changelog, true)

    UI.message "#{scheme} (#{platform} App Store #{tag_version}) distributed to public beta group. ✅"
  end

  desc 'Builds for a scheme and a configuration'
  private_lane :build_lane do |options|
    options[:export_to_appstore] ||= false
    options[:display_name_suffix] ||= ''
    options[:version_suffix] ||= ''
    options[:build_name] ||= ''
    options[:platform] ||= 'iOS'
    options[:version] = xcode_marketing_version(options[:platform])

    options = update_options_to_appstore(options)

    options[:team_id] = app_config.try_fetch_value(:team_id)

    # CI can take time to be ready to start the build
    ENV['FASTLANE_XCODEBUILD_SETTINGS_RETRIES'] = '10'

    destination = "generic/platform=#{options[:platform]}"
    lane_name = lane_context[SharedValues::LANE_NAME]
    output_directory = "fastlane/export/#{lane_name}/"
    gym(
      configuration: options[:configuration],
      scheme: options[:scheme],
      silent: true,
      clean: true,
      xcargs: srg_xcargs(options),
      export_method: options[:export_to_appstore] ? 'app-store' : 'enterprise',
      include_bitcode: options[:export_to_appstore],
      export_team_id: options[:team_id],
      destination: destination,
      derived_data_path: derived_data_path,
      output_directory: output_directory
    )
  end

  desc 'Uploads a build on App Center or just a dSYM file'
  private_lane :appcenter_lane do |options|
    options[:notify_testers] ||= false

    if options[:upload_dsym]
      appcenter_upload(
        api_token: ENV['PLAY_APPCENTER_TOKEN'],
        owner_type: 'organization',
        owner_name: ENV['PLAY_APPCENTER_OWNER'],
        app_name: options[:appname],
        release_notes: options[:notes],
        upload_dsym_only: true,
        dsym: options[:upload_dsym]
      )
    else
      appcenter_upload(
        api_token: ENV['PLAY_APPCENTER_TOKEN'],
        owner_type: 'organization',
        owner_name: ENV['PLAY_APPCENTER_OWNER'],
        app_name: options[:appname],
        release_notes: options[:notes],
        destination_type: 'group',
        destinations: options[:destinations],
        notify_testers: options[:notify_testers]
      )
    end
  end

  desc 'Add tester to TestFlight, by default for betas'
  private_lane :addTestFlightTester do |options|
    email = spaceship_email_required(options[:email])
    email ||= spaceship_email_required(prompt(text: 'email: '))
    return UI.user_error!('A valid email is required. (email parameter)') unless email

    UI.message("Preparing invitations to #{email}. 📩")

    app_identifiers = options[:app_identifiers] || appstore_beta_identifiers
    group_name = options[:group_name] || ENV['ITUNES_CONNECT_TF_GROUPS']

    spaceship_login

    app_identifiers.each do |app_identifier|
      app = spaceship_app(app_identifier)
      next unless app

      group = spaceship_get_group(app, group_name)
      next unless group

      tester = spaceship_get_tester(app, email)
      if tester
        if tester.status == 'invited'
          spaceship_delete_tester(app, tester)
          UI.message("#{email} was invited as a tester for #{app.name}. Invitation removed. 📨 🚮")
        else # accepted or installed
          UI.message("#{email} is already a tester for #{app.name} (status: #{tester.status}). 🔁 ✅")
          next
        end
      end

      spaceship_add_tester(group, email, options[:first_name], options[:last_name])

      UI.message "#{email} tester added to #{group.name} for #{app.name}. Invitation sent. 📨 ✅"
    end
  end

  after_all do |lane|
    if cleaned_lane_condition(lane)
      ENV.delete('DERIVED_DATA_CLEANED')
      reset_git_repo(skip_clean: true)
    end
  end

  error do |lane|
    if cleaned_lane_condition(lane)
      clean_build_artifacts
      ENV.delete('DERIVED_DATA_CLEANED')
      reset_git_repo(skip_clean: true, force: true)
    end
  end
end

#
# Functions
#

def business_units
  ['RTS', 'SRF', 'RSI', 'RTR', 'SWI']
end

def business_unit_index(business_unit)
  business_units.index(business_unit.upcase)
end

def ios_application_schemes
  business_units.map { |business_unit| "Play #{business_unit}" }
end

def tvos_application_schemes
  business_units.map { |business_unit| "Play #{business_unit} TV" }
end

def application_schemes(platform)
  platform ||= 'iOS'

  if platform == 'iOS'
    ios_application_schemes
  else
    tvos_application_schemes
  end
end

def application_scheme(platform, business_unit)
  platform ||= 'iOS'

  application_schemes(platform)[business_unit_index(business_unit)]
end

def screenshots_scheme(platform, business_unit)
  platform ||= 'iOS'

  application_scheme = application_scheme(platform, business_unit)
  return unless application_scheme

  "#{application_scheme} screenshots"
end

def app_config
  CredentialsManager::AppfileConfig
end

def cleaned_lane_condition(lane)
  (lane.to_s != 'devLane') &&
    ['distribute', 'dsym', 'screenshots', 'tester'].all? { |i| !lane.to_s.downcase.include? i }
end

def skip_clean_derived_data
  ENV['DERIVED_DATA_CLEANED'] == '1'
end

def clean_derived_data
  Dir.chdir('..') { FileUtils.remove_entry(derived_data_path, true) }
  ENV['DERIVED_DATA_CLEANED'] = '1'
end

def derived_data_path
  'build/DerivedData'
end

def appcenter_ios_nightly_appcenter_names
  business_units.map { |business_unit| ENV["PLAY_#{business_unit}_NIGHTLY_APPCENTER_APPNAME"] }
end

def appcenter_tv_nightly_names
  business_units.map { |business_unit| ENV["PLAY_#{business_unit}_TV_NIGHTLY_APPCENTER_APPNAME"] }
end

def appcenter_ios_nightly_names
  business_units.map { |business_unit| ENV["PLAY_#{business_unit}_IOS_NIGHTLY_APPCENTER_APPNAME"] }
end

def appcenter_testflight_nightly_names(platform)
  platform ||= 'iOS'

  if platform == 'iOS'
    appcenter_ios_nightly_names
  else
    appcenter_tv_nightly_names
  end
end

def appcenter_ios_beta_appcenter_names
  business_units.map { |business_unit| ENV["PLAY_#{business_unit}_BETA_APPCENTER_APPNAME"] }
end

def appcenter_tv_beta_names
  business_units.map { |business_unit| ENV["PLAY_#{business_unit}_TV_BETA_APPCENTER_APPNAME"] }
end

def appcenter_ios_beta_names
  business_units.map { |business_unit| ENV["PLAY_#{business_unit}_IOS_BETA_APPCENTER_APPNAME"] }
end

def appcenter_testflight_beta_names(platform)
  platform ||= 'iOS'

  if platform == 'iOS'
    appcenter_ios_beta_names
  else
    appcenter_tv_beta_names
  end
end

def appstore_nightly_identifiers
  business_units.map do |business_unit|
    ENV["ITUNES_CONNECT_NIGHLTY_#{business_unit}_APP_IDENTIFIER"]
  end
end

def appstore_beta_identifiers
  business_units.map do |business_unit|
    ENV["ITUNES_CONNECT_BETA_#{business_unit}_APP_IDENTIFIER"]
  end
end

def appstore_team_api_key_prefixes
  {
    ENV['RSI_ITUNES_CONNECT_TEAM_ID'] => 'RSI',
    ENV['RTS_ITUNES_CONNECT_TEAM_ID'] => 'RTS',
    ENV['SRF_ITUNES_CONNECT_TEAM_ID'] => 'SRF',
    ENV['SRGSSR_ITUNES_CONNECT_TEAM_ID'] => 'SRGSSR', # RTR is in SRG SSR ASC team
    ENV['SWI_ITUNES_CONNECT_TEAM_ID'] => 'SWI'
  }
end

# Returns current tag version
def tag_version(platform)
  "#{xcode_marketing_version(platform)}-#{xcode_build_number(platform)}"
end

def srg_tag(platform)
  "#{platform.downcase}/#{tag_version(platform)}"
end

def build_number_from_tag_version(tag_version)
  tag_version.split('-').last
end

def marketing_version_from_tag_version(tag_version)
  tag_version.split('-').first
end

# Returns the what's new text from WhatsNew-beta.json file in the repository
def what_s_new_for_beta(platform, tag_version)
  tag_version ||= tag_version(platform)

  file = File.open("../WhatsNew-#{platform}-beta.json", 'r')
  json = JSON.parse(file.read)
  file.close
  what_s_new = json[tag_version]
  what_s_new || ''
end

# Characters "-" or "+" in version are not allowed on App Store Connect.
def update_options_to_appstore(options)
  return options unless options[:export_to_appstore]

  options[:version_suffix] = ''
  version = options[:version]
  index = version.index('-')
  return options unless index

  options[:version] = version[0..index - 1]
  options
end

def srg_xcargs(options)
  export_to_appstore = options[:export_to_appstore] || false
  xcargs = export_to_appstore ? 'ENABLE_BITCODE=YES' : 'ENABLE_BITCODE=NO'
  xcargs += " BUNDLE_DISPLAY_NAME_SUFFIX='#{options[:display_name_suffix]}'"
  xcargs += " MARKETING_VERSION='#{options[:version]}'"
  xcargs += " MARKETING_VERSION_SUFFIX='#{options[:version_suffix]}'"
  xcargs += " BUILD_NAME='#{options[:build_name]}'"
  xcargs += " DEVELOPMENT_TEAM='#{options[:team_id]}'"
  xcargs + srg_xcargs_code_signing(export_to_appstore)
end

# Use cloud signing if available
def srg_xcargs_code_signing(export_to_appstore)
  asc_api_key = srg_app_store_connect_api_key if export_to_appstore

  xcargs = ''
  if asc_api_key
    xcargs += " -authenticationKeyIssuerID '#{asc_api_key[:issuerId]}'"
    xcargs += " -authenticationKeyID '#{asc_api_key[:id]}'"
    xcargs += " -authenticationKeyPath '#{asc_api_key[:filePath]}'"
  end
  "#{xcargs} -allowProvisioningUpdates"
end

def nightly_display_name_suffix(branch_name)
  nightly_display_name_suffix = ' 🌙'
  nightly_display_name_suffix = ' 🌿' if branch_name.include? 'feature/'
  nightly_display_name_suffix
end

def nightly_version_suffix(branch_name)
  nightly_version_suffix = '-nightly'
  if branch_name.include? 'feature/'
    nightly_version_suffix += "+#{branch_name.sub('feature/', '').strip}"
  end
  nightly_version_suffix
end

def nightly_build_name(branch_name)
  if branch_name.include? 'feature/'
    branch_name.sub('feature/', '').strip
  else
    ''
  end
end

# Return a nightly changelog from git commit messages
def nightly_changelog(platform, service)
  last_commit_hash = last_nightlies_success_git_commit_hash(platform, service)
  last_commit_hash = 'HEAD^^^^^' if last_commit_hash.length < 12

  changelog = changelog_from_git_commits(
    between: [last_commit_hash, 'HEAD'],
    pretty: '- %s'
  )

  # HAX: strip emoji from changelog
  changelog = changelog ? changelog.sub(/[\u{1F300}-\u{1F6FF}]/, '').lstrip : ''

  changelog.empty? ? 'No change log found for this build.' : changelog
end

# Save the git commit hash in a local text file for nightlies
def save_last_nightlies_success_git_commit_hash(platform, service)
  last = last_git_commit
  platform = platform ? "#{platform.downcase}-" : ''
  service = service ? "#{service.downcase}-" : ''
  file_name = "last-#{service}#{platform}nightlies-success-git-commit-hash.txt"
  File.write(file_name, last[:commit_hash])
  last[:commit_hash]
end

# Read the git commit hash in a local text file for nightlies
def last_nightlies_success_git_commit_hash(platform, service)
  platform = platform ? "#{platform.downcase}-" : ''
  service = service ? "#{service.downcase}-" : ''
  file_name = "last-#{service}#{platform}nightlies-success-git-commit-hash.txt"
  file = File.open(file_name, 'a+')
  nightlies_success_git_commit_hash = file.read
  file.close
  nightlies_success_git_commit_hash
end

# Returns the marketing version for a platform, without suffix
def xcode_marketing_version(platform)
  get_xcconfig_value(
    path: srg_xcconfig_path(platform),
    name: 'MARKETING_VERSION'
  )
end

# Returns the build number for a platform
def xcode_build_number(platform)
  get_xcconfig_value(
    path: srg_xcconfig_path(platform),
    name: 'CURRENT_PROJECT_VERSION'
  )
end

# Override build number for a platform (current project version)
def xcode_override_build_number(platform, build_number)
  update_xcconfig_value(
    path: srg_xcconfig_path(platform),
    name: 'CURRENT_PROJECT_VERSION',
    value: build_number.to_s
  )
  build_number.to_s
end

def srg_xcconfig_path(platform)
  "Xcode/Shared/Targets/#{platform}/Common.xcconfig"
end

def appstore_platform(platform)
  appstore_platforms = { 'iOS' => 'ios', 'tvOS' => 'appletvos' }
  appstore_platforms[platform]
end

def srg_app_store_connect_api_key
  itc_team_id = app_config.try_fetch_value(:itc_team_id)
  key_prefix = appstore_team_api_key_prefixes[itc_team_id]
  return unless key_prefix

  folder_path = Dir.chdir('..') { Dir.pwd }
  { id: ENV["#{key_prefix}_APPSTORE_CONNECT_API_KEY_ID"],
    issuerId: ENV["#{key_prefix}_APPSTORE_CONNECT_API_KEY_ISSUER_ID"],
    filePath: "#{folder_path}/Configuration/#{ENV["#{key_prefix}_APPSTORE_CONNECT_API_KEY_PATH"]}" }
end

def login_with_app_store_connect_api_key
  asc_api_key = srg_app_store_connect_api_key
  return unless asc_api_key

  app_store_connect_api_key(
    key_id: asc_api_key[:id],
    issuer_id: asc_api_key[:issuerId],
    key_filepath: asc_api_key[:filePath]
  )
end

def pilot_fast_upload(app_identifier, platform)
  app_identifier ||= app_config.try_fetch_value(:app_identifier)
  platform ||= 'iOS'

  lane_context.delete(SharedValues::FL_CHANGELOG)

  xcversion(version: '~> 13')
  login_with_app_store_connect_api_key
  pilot(
    app_identifier: app_identifier,
    app_platform: appstore_platform(platform),
    skip_waiting_for_build_processing: true
  )
  xcversion(version: '~> 14')
end

def pilot_distribute(app_identifier, platform, tag_version, changelog, is_public_beta)
  app_identifier ||= app_config.try_fetch_value(:app_identifier)
  platform ||= 'iOS'
  tag_version ||= tag_version(platform)
  is_public_beta ||= false

  srg_pilot_distribute(app_identifier, platform, tag_version, changelog, is_public_beta)
rescue StandardError => e
  raise unless e.message.include? 'Another build is in review'

  UI.important('Another build is already in TestFlight app review. Skipping external distribution. ⚠️')
end

def srg_pilot_distribute(app_identifier, platform, tag_version, changelog, is_public_beta)
  groups = is_public_beta ? ENV['ITUNES_CONNECT_TF_PUBLIC_GROUPS'] : ENV['ITUNES_CONNECT_TF_GROUPS']

  xcversion(version: '~> 13')
  login_with_app_store_connect_api_key
  pilot(
    distribute_only: true,
    app_identifier: app_identifier,
    app_platform: appstore_platform(platform),
    app_version: marketing_version_from_tag_version(tag_version),
    build_number: build_number_from_tag_version(tag_version),
    changelog: changelog,
    distribute_external: true,
    groups: groups,
    notify_external_testers: true,
    demo_account_required: false,
    beta_app_review_info: beta_app_review_info
  )
  xcversion(version: '~> 14')
end

# Update dSYMs from App Store Connect to App Center.
def update_dsyms(app_identifier, platform, appcenter_appname, options)
  app_identifier ||= app_config.try_fetch_value(:app_identifier)
  platform ||= 'iOS'

  output_directory = "fastlane/export/#{lane_context[SharedValues::LANE_NAME]}"
  Dir.chdir('..') { FileUtils.mkdir_p(output_directory) }

  download_appstore_dsyms(app_identifier, platform, options, output_directory)
  upload_appcenter_dsyms(appcenter_appname)

  lane_context.delete(SharedValues::DSYM_PATHS)
end

def download_appstore_dsyms(app_identifier, platform, options, output_directory)
  app_identifier ||= app_config.try_fetch_value(:app_identifier)
  platform ||= 'iOS'
  options[:version] ||= 'latest'

  login_with_app_store_connect_api_key
  download_dsyms(
    app_identifier: app_identifier,
    platform: appstore_platform(platform),
    min_version: options[:build_number] ? nil : options[:min_version],
    version: options[:min_version] || options[:build_number] ? nil : options[:version],
    build_number: options[:build_number],
    output_directory: output_directory,
    wait_for_dsym_processing: true,
    wait_timeout: 90
  )
end

def upload_appcenter_dsyms(appcenter_appname)
  lane_context[SharedValues::DSYM_PATHS]&.each do |dsym|
    appcenter_lane(
      appname: appcenter_appname,
      notes: 'DSYMs from App Store Connect (via fastlane).',
      upload_dsym: dsym
    )
  end
end

# Share build version and number to the continuous integration
def notify_version_to_ci(platform, tag_version, build_name)
  return unless ENV['TEAMCITY_VERSION']

  tag_version ||= tag_version(platform)
  build_name ||= ''

  displayed_build_number = tag_version
  displayed_build_number += "+#{build_name}" unless build_name.empty?
  puts "##teamcity[buildNumber '#{displayed_build_number}']"
end

# Returns current build number on App Center
def latest_appcenter_build_number(app_names)
  build_number = 0
  app_names.each_index do |index|
    number = Integer(appcenter_fetch_version_number(
      api_token: ENV['PLAY_APPCENTER_TOKEN'],
      owner_name: ENV['PLAY_APPCENTER_OWNER'],
      app_name: app_names[index]
    )['build_number'])

    build_number = number unless build_number >= number
  end
  build_number
end

# Returns current build number on App Store Connect
def srg_latest_testflight_build_number(app_identifiers, platform)
  login_with_app_store_connect_api_key

  build_number = 0
  app_identifiers.each_index do |index|
    number = latest_testflight_build_number(
      platform: appstore_platform(platform),
      app_identifier: app_identifiers[index]
    )

    build_number = number unless build_number >= number
  end
  build_number
end

# Create screenshots for App Store Connect.
def screenshots(platform, business_unit)
  platform ||= 'iOS'
  output_directory = "fastlane/export/#{lane_context[SharedValues::LANE_NAME]}"
  Dir.chdir('..') { FileUtils.mkdir_p(output_directory) }

  snapshot(
    scheme: screenshots_scheme(platform, business_unit),
    languages: [device_language(business_unit)],
    devices: snapshot_devices(platform),
    derived_data_path: derived_data_path,
    output_directory: output_directory
  )
end

def device_language(business_unit)
  languages = {
    'RSI' => 'it-CH',
    'RTR' => 'de-CH',
    'RTS' => 'fr-CH',
    'SRF' => 'de-CH',
    'SWI' => 'en-US'
  }
  languages[business_unit]
end

def upload_screenshots(platform)
  platform ||= 'iOS'

  login_with_app_store_connect_api_key
  deliver(
    platform: appstore_platform(platform),
    app_version: xcode_marketing_version(platform),
    skip_binary_upload: true,
    skip_metadata: true,
    overwrite_screenshots: true,
    precheck_include_in_app_purchases: false,
    force: true # Don't stop to wait manual preview
  )
end

def can_upload_testflight_build(app_identifier, platform, tag_version)
  app_identifier ||= app_config.try_fetch_value(:app_identifier)
  platform ||= 'iOS'
  tag_version ||= tag_version(platform)
  build_number = build_number_from_tag_version(tag_version)

  login_with_app_store_connect_api_key
  appstore_build_number = latest_testflight_build_number(
    platform: appstore_platform(platform),
    app_identifier: app_identifier
  )

  (appstore_build_number < build_number.to_i)
end

# Beta workflow: tag the new beta, bump build number and push to the repository,
# only if we are on the develop branch and the tag does not already exist.
def bump_build_number_beta_workflow(platform)
  return unless git_branch_name.include? 'develop'

  tag = srg_tag(platform)

  git_pull(only_tags: true)
  if git_tag_exists(tag: tag)
    UI.important("Tag \"#{tag}\" already exists. Probably done by an other build (to AppCenter, to TestFlight or did it manually). ⚠️")
  else
    srg_add_tag_and_bump_build_number(platform, tag)
    UI.message("Tag \"#{tag}\" created. ✅")
  end
end

def srg_add_tag_and_bump_build_number(platform, tag)
  add_git_tag(tag: tag)
  bump_build_number_commit(platform)
  git_pull(rebase: true)
  push_to_git_remote
end

def bump_build_number_commit(platform)
  build_number = xcode_override_build_number(platform, xcode_build_number(platform).to_i + 1)
  commit_version_bump(
    xcodeproj: 'PlaySRG.xcodeproj',
    message: "Bump #{platform} build number to #{build_number}",
    include: srg_xcconfig_path(platform),
    ignore: /.+/
  )
end

def git_branch_name
  sh "git branch | grep \\* | cut -d ' ' -f2"
end

def beta_app_review_info
  {
    contact_email: ENV['ITUNES_CONNECT_REVIEW_EMAIL'],
    contact_first_name: ENV['ITUNES_CONNECT_REVIEW_FIRST_NAME'],
    contact_last_name: ENV['ITUNES_CONNECT_REVIEW_LAST_NAME'],
    contact_phone: ENV['ITUNES_CONNECT_REVIEW_PHONE']
  }
end

def snapshot_devices(platform)
  platform ||= 'iOS'

  if platform == 'iOS'
    snapshot_ios_devices
  else
    snapshot_tvos_devices
  end
end

def snapshot_ios_devices
  [
    'iPhone 13 Pro Max', # 6.5 inch, required
    'iPhone 8 Plus', # 5.5 inch, required
    'iPad Pro (12.9-inch) (5th generation)', # 12.9 inch, required
    'iPad Pro (12.9-inch) (2nd generation)' # 12.9 inch, required
  ]
end

def snapshot_tvos_devices
  [
    'Apple TV'
  ]
end

def spaceship_login
  ENV['FASTLANE_ITC_TEAM_ID'] = app_config.try_fetch_value(:itc_team_id)
  Spaceship::Tunes.login
  Spaceship::Tunes.select_team
end

def spaceship_email_required(email)
  return if !email || (email.strip !~ URI::MailTo::EMAIL_REGEXP)

  email.strip
end

def spaceship_app(app_identifier)
  app = Spaceship::ConnectAPI::App.find(app_identifier)
  UI.message("#{app_identifier} app does not exist. ⚠️") unless app
  app
end

def spaceship_get_group(app, group_name)
  group = app.get_beta_groups(filter: { name: group_name }).first
  UI.message("#{group_name} group does not exist for #{app.name}. ⚠️") unless group
  group
end

def spaceship_get_tester(app, email)
  Spaceship::TestFlight::Tester.search(app_id: app.id, text: email).first
end

def spaceship_delete_tester(app, tester)
  Spaceship::ConnectAPI.delete_beta_tester_from_apps(
    beta_tester_id: tester.tester_id,
    app_ids: [app.id]
  )
end

def spaceship_new_tester(email, first_name, last_name)
  { email: email, firstName: first_name, lastName: last_name }
end

def spaceship_add_tester(group, email, first_name, last_name)
  tester = spaceship_new_tester(email, first_name, last_name)
  group.post_bulk_beta_tester_assignments(beta_testers: [tester])
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
