# frozen_string_literal: true

# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version '2.96.0'

default_platform :ios

platform :ios do
  before_all do |lane|
    platform = lane.to_s.downcase.include?('tvos') ? 'tvOS' : 'iOS'

    # For betas, before all, check if we have a beta release description
    if lane.to_s.downcase.include?('betas')
      what_s_new = what_s_new_for_beta(platform)
      if what_s_new.empty?
        UI.user_error!('Whoops, WhatsNew-' + platform + '-beta.json has no release note for ' + tag_version(platform) + '.')
      end
    end

    xcversion(version: '~> 13')

    if cleaned_lane_condition(lane)
      ensure_git_status_clean
      clean_derived_data unless skip_clean_derived_data
    end
  end

  # Nightlies

  desc 'Builds a new iOS nightly on App Center.'
  lane :nightlies do
    platform = 'iOS'
    service = 'AppCenter'

    build_number = latest_appcenter_build_number(appcenter_nightly_names)
    build_number = xcode_override_build_number(platform, build_number + 1)

    branch_name = git_branch_name

    notify_build_number_to_ci(platform, nightly_build_name(branch_name))

    changelog = default_changelog_for_nightlies(platform, service)

    ios_schemes.each_index do |index|
      build_lane(
        configuration: 'Nightly_AppCenter',
        scheme: ios_schemes[index],
        display_name_suffix: nighlty_display_name_suffix(branch_name),
        version_suffix: nightly_version_suffix(branch_name),
        build_name: nightly_build_name(branch_name),
        platform: platform
      )

      appcenter_lane(
        appname: appcenter_nightly_names[index],
        destinations: ENV['PLAY_NIGHTLY_APPCENTER_DESTINATIONS'],
        notes: changelog
      )

      clean_build_artifacts

      UI.message ios_schemes[index] + ' (Nightly ' + build_number + ') delivered. ✅'
    end

    save_last_nightlies_success_git_commit_hash(platform, service)
  end

  desc 'Builds a new tvOS nightly on AppStore Connect and waits build processing.'
  lane :tvOSnightlies do
    testflight_nightlies(platform: 'tvOS')
  end

  desc 'Sends latest tvOS nightly dSYMs to App Center. Optional \'version\' or \'min_version\' parameters.'
  lane :tvOSnightlyDSYMs do |options|
    tvos_schemes.each_index do |index|
      app_identifier = appstore_nightly_identifiers[index]
      appcenter_appname = appcenter_tv_nightly_names[index]
      update_dsyms(app_identifier, 'tvOS', appcenter_appname, options)
    end
  end

  desc 'Builds a new iOS nightly on AppStore Connect and waits build processing.'
  lane :iOSnightlies do
    testflight_nightlies(platform: 'iOS')
  end

  desc 'Sends latest iOS nightly dSYMs to App Center. Optional \'version\' or \'min_version\' parameters.'
  lane :iOSnightlyDSYMs do |options|
    ios_schemes.each_index do |index|
      app_identifier = appstore_nightly_identifiers[index]
      appcenter_appname = appcenter_ios_nightly_names[index]
      update_dsyms(app_identifier, 'iOS', appcenter_appname, options)
    end
  end

  desc 'Add a nightly TestFlight tester (email required)'
  lane :nightlyTester do |options|
    addTestFlightTester(
      email: options[:email],
      first_name: options[:first_name],
      last_name: options[:last_name],
      app_identifiers: appstore_nightly_identifiers,
      group_name: ENV['ITUNES_CONNECT_TESTFLIGHT_GROUPS']
    )
  end

  # Betas

  desc 'Builds a new iOS beta on App Center with the current build number. If on the develop branch, tries to tag the current version, then bumps the build number and pushes.'
  lane :betas do
    platform = 'iOS'

    notify_build_number_to_ci(platform, nil)

    ios_schemes.each_index do |index|
      build_lane(
        configuration: 'Beta_AppCenter',
        scheme: ios_schemes[index],
        display_name_suffix: ' 🎯',
        version_suffix: '-beta',
        platform: platform
      )

      appcenter_lane(
        appname: appcenter_beta_names[index],
        destinations: ENV['PLAY_BETA_APPCENTER_DESTINATIONS'],
        notes: what_s_new_for_beta(platform),
        notify_testers: true
      )

      clean_build_artifacts
    end

    bump_build_number_beta_workflow(platform)
  end

  desc 'Builds a new tvOS beta on AppStore Connect with the current build number and waits build processing. If on the develop branch, tries to tag the current version, then bumps the build number and pushes.'
  lane :tvOSbetas do
    testflight_betas(platform: 'tvOS')
  end

  desc 'Sends latest tvOS beta dSYMs to App Center. Optional \'version\' or \'min_version\' parameters.'
  lane :tvOSbetaDSYMs do |options|
    tvos_schemes.each_index do |index|
      app_identifier = appstore_beta_identifiers[index]
      appcenter_appname = appcenter_tv_beta_names[index]
      update_dsyms(app_identifier, 'tvOS', appcenter_appname, options)
    end
  end

  desc 'Builds a new iOS beta on AppStore Connect with the current build number and waits build processing. If on the develop branch, tries to tag the current version, then bumps the build number and pushes.'
  lane :iOSbetas do
    testflight_betas(platform: 'iOS')
  end

  desc 'Sends latest iOS beta dSYMs to App Center. Optional \'version\' or \'min_version\' parameters.'
  lane :iOSbetaDSYMs do |options|
    ios_schemes.each_index do |index|
      app_identifier = appstore_beta_identifiers[index]
      appcenter_appname = appcenter_ios_beta_names[index]
      update_dsyms(app_identifier, 'iOS', appcenter_appname, options)
    end
  end

  desc 'Add a beta TestFlight tester (email required)'
  lane :betaTester do |options|
    addTestFlightTester(
      email: options[:email],
      first_name: options[:first_name],
      last_name: options[:last_name],
      app_identifiers: appstore_beta_identifiers,
      group_name: ENV['ITUNES_CONNECT_TESTFLIGHT_GROUPS']
    )
  end

  # Prods

  desc 'Uploads a new iOS build on AppStore Connect with the current build number.'
  lane :appStoreUploads do
    platform = 'iOS'

    notify_build_number_to_ci(platform, nil)

    sh 'bundle exec fastlane ios swiAppStoreUpload'
    sh 'bundle exec fastlane ios srfAppStoreUpload'
    sh 'bundle exec fastlane ios rtsAppStoreUpload'
    sh 'bundle exec fastlane ios rsiAppStoreUpload'
    sh 'bundle exec fastlane ios rtrAppStoreUpload'
  end

  desc 'Sends latest iOS dSYMs to App Center. Optional \'version\' or \'min_version\' parameters.'
  lane :dSYMs do |options|
    min_version = options[:min_version]
    version = options[:version]

    options = ''
    options += ' min_version:' + min_version if min_version
    options += ' version:' + version if version

    sh 'bundle exec fastlane ios swiDSYMs' + options
    sh 'bundle exec fastlane ios srfDSYMs' + options
    sh 'bundle exec fastlane ios rtsDSYMs' + options
    sh 'bundle exec fastlane ios rsiDSYMs' + options
    sh 'bundle exec fastlane ios rtrDSYMs' + options
  end

  desc 'Uploads a new tvOS build on AppStore Connect with the current build number.'
  lane :tvOSappStoreUploads do
    platform = 'tvOS'

    notify_build_number_to_ci(platform, nil)

    sh 'bundle exec fastlane ios tvOSswiAppStoreUpload'
    sh 'bundle exec fastlane ios tvOSsrfAppStoreUpload'
    sh 'bundle exec fastlane ios tvOSrtsAppStoreUpload'
    sh 'bundle exec fastlane ios tvOSrsiAppStoreUpload'
    sh 'bundle exec fastlane ios tvOSrtrAppStoreUpload'
  end

  desc 'Sends latest tvOS dSYMs to App Center. Optional \'version\' or \'min_version\' parameters.'
  lane :tvOSdSYMs do |options|
    min_version = options[:min_version]
    version = options[:version]

    options = ''
    options += ' min_version:' + min_version if min_version
    options += ' version:' + version if version

    sh 'bundle exec fastlane ios tvOSswiDSYMs' + options
    sh 'bundle exec fastlane ios tvOSsrfDSYMs' + options
    sh 'bundle exec fastlane ios tvOSrtsDSYMs' + options
    sh 'bundle exec fastlane ios tvOSrsiDSYMs' + options
    sh 'bundle exec fastlane ios tvOSrtrDSYMs' + options
  end

  # Individual iOS screenshots

  desc 'SWI: Makes iOS screenshots and replaces current ones on AppStoreConnect.'
  lane :swiScreenshots do
    platform = 'iOS'

    screenshots(platform, 'Play SWI screenshots', ['en-US'])
    upload_screenshots(platform)
  end

  desc 'SRF: Makes iOS screenshots and replaces current ones on AppStoreConnect.'
  lane :srfScreenshots do
    platform = 'iOS'

    screenshots(platform, 'Play SRF screenshots', ['de-DE'])
    # upload_screenshots(platform) # Don't erase existing ones, from SRF marketing team.
  end

  desc 'RTS: Makes iOS screenshots and replaces current ones on AppStoreConnect.'
  lane :rtsScreenshots do
    platform = 'iOS'

    screenshots(platform, 'Play RTS screenshots', ['fr-FR'])
    upload_screenshots(platform)
  end

  desc 'RSI: Makes iOS screenshots and replaces current ones on AppStoreConnect.'
  lane :rsiScreenshots do
    platform = 'iOS'

    screenshots(platform, 'Play RSI screenshots', ['it'])
    upload_screenshots(platform)
  end

  desc 'RTR: Makes iOS screenshots and replaces current ones on AppStoreConnect.'
  lane :rtrScreenshots do
    platform = 'iOS'

    screenshots(platform, 'Play RTR screenshots', ['de-DE'])
    upload_screenshots(platform)
  end

  # Individual iOS build uploads

  desc 'SWI: Uploads a new iOS build on AppStore Connect with the current build number.'
  lane :swiAppStoreUpload do
    testflight_lane(platform: 'iOS', scheme: 'Play SWI')
  end

  desc 'SRF: Uploads a new iOS build on AppStore Connect with the current build number.'
  lane :srfAppStoreUpload do
    testflight_lane(platform: 'iOS', scheme: 'Play SRF')
  end

  desc 'RTS: Uploads a new iOS build on AppStore Connect with the current build number.'
  lane :rtsAppStoreUpload do
    testflight_lane(platform: 'iOS', scheme: 'Play RTS')
  end

  desc 'RSI: Uploads a new iOS build on AppStore Connect with the current build number.'
  lane :rsiAppStoreUpload do
    testflight_lane(platform: 'iOS', scheme: 'Play RSI')
  end

  desc 'RTR: Uploads a new iOS build on AppStore Connect with the current build number.'
  lane :rtrAppStoreUpload do
    testflight_lane(platform: 'iOS', scheme: 'Play RTR')
  end

  # Individual latest iOS dSYMs uploads

  desc 'SWI: Sends latest iOS dSYMs to App Center, with same parameters as \'dSYMs\'.'
  lane :swiDSYMs do |options|
    update_dsyms(nil, 'iOS', ENV['PLAY_SWI_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'SFR: Sends latest iOS dSYMs to App Center, with same parameters as \'dSYMs\'.'
  lane :srfDSYMs do |options|
    update_dsyms(nil, 'iOS', ENV['PLAY_SRF_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'RTS: Sends latest iOS dSYMs to App Center, with same parameters as \'dSYMs\'.'
  lane :rtsDSYMs do |options|
    update_dsyms(nil, 'iOS', ENV['PLAY_RTS_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'RSI: Sends latest iOS dSYMs to App Center, with same parameters as \'dSYMs\'.'
  lane :rsiDSYMs do |options|
    update_dsyms(nil, 'iOS', ENV['PLAY_RSI_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'RTR: Sends latest iOS dSYMs to App Center, with same parameters as \'dSYMs\'.'
  lane :rtrDSYMs do |options|
    update_dsyms(nil, 'iOS', ENV['PLAY_RTR_APPSTORE_APPCENTER_APPNAME'], options)
  end

  # Individual tvOS screenshots

  desc 'SWI: Makes tvOS screenshots and replaces current ones on AppStoreConnect.'
  lane :tvOSswiScreenshots do
    platform = 'tvOS'

    screenshots(platform, 'Play SWI TV screenshots', ['en-US'])
    upload_screenshots(platform)
  end

  desc 'SRF: Makes tvOS screenshots and replaces current ones on AppStoreConnect.'
  lane :tvOSsrfScreenshots do
    platform = 'tvOS'

    screenshots(platform, 'Play SRF TV screenshots', ['de-DE'])
    upload_screenshots(platform)
  end

  desc 'RTS: Makes tvOS screenshots and replaces current ones on AppStoreConnect.'
  lane :tvOSrtsScreenshots do
    platform = 'tvOS'

    screenshots(platform, 'Play RTS TV screenshots', ['fr-FR'])
    upload_screenshots(platform)
  end

  desc 'RSI: Makes tvOS screenshots and replaces current ones on AppStoreConnect.'
  lane :tvOSrsiScreenshots do
    platform = 'tvOS'

    screenshots(platform, 'Play RSI TV screenshots', ['it'])
    upload_screenshots(platform)
  end

  desc 'RTR: Makes tvOS screenshots and replaces current ones on AppStoreConnect.'
  lane :tvOSrtrScreenshots do
    platform = 'tvOS'

    screenshots(platform, 'Play RTR TV screenshots', ['de-DE'])
    upload_screenshots(platform)
  end

  # Individual tvOS build uploads

  desc 'SWI: Uploads a new tvOS build on AppStore Connect with the current build number.'
  lane :tvOSswiAppStoreUpload do
    testflight_lane(platform: 'tvOS', scheme: 'Play SWI TV')
  end

  desc 'SRF: Uploads a new tvOS build on AppStore Connect with the current build number.'
  lane :tvOSsrfAppStoreUpload do
    testflight_lane(platform: 'tvOS', scheme: 'Play SRF TV')
  end

  desc 'RTS: Uploads a new tvOS build on AppStore Connect with the current build number.'
  lane :tvOSrtsAppStoreUpload do
    testflight_lane(platform: 'tvOS', scheme: 'Play RTS TV')
  end

  desc 'RSI: Uploads a new tvOS build on AppStore Connect with the current build number.'
  lane :tvOSrsiAppStoreUpload do
    testflight_lane(platform: 'tvOS', scheme: 'Play RSI TV')
  end

  desc 'RTR: Uploads a new tvOS build on AppStore Connect with the current build number.'
  lane :tvOSrtrAppStoreUpload do
    testflight_lane(platform: 'tvOS', scheme: 'Play RTR TV')
  end

  # Individual latest tvOS dSYMs uploads

  desc 'SWI: Sends latest tvOS dSYMs to App Center, with same parameters as \'tvOSdSYMs\'.'
  lane :tvOSswiDSYMs do |options|
    update_dsyms(nil, 'tvOS', ENV['PLAY_SWI_TV_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'SFR: Sends latest tvOS dSYMs to App Center, with same parameters as \'tvOSdSYMs\'.'
  lane :tvOSsrfDSYMs do |options|
    update_dsyms(nil, 'tvOS', ENV['PLAY_SRF_TV_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'RTS: Sends latest tvOS dSYMs to App Center, with same parameters as \'tvOSdSYMs\'.'
  lane :tvOSrtsDSYMs do |options|
    update_dsyms(nil, 'tvOS', ENV['PLAY_RTS_TV_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'RSI: Sends latest tvOS dSYMs to App Center, with same parameters as \'tvOSdSYMs\'.'
  lane :tvOSrsiDSYMs do |options|
    update_dsyms(nil, 'tvOS', ENV['PLAY_RSI_TV_APPSTORE_APPCENTER_APPNAME'], options)
  end

  desc 'RTR: Sends latest tvOS dSYMs to App Center, with same parameters as \'tvOSdSYMs\'.'
  lane :tvOSrtrDSYMs do |options|
    update_dsyms(nil, 'tvOS', ENV['PLAY_RTR_TV_APPSTORE_APPCENTER_APPNAME'], options)
  end

  # Private lanes

  desc 'Builds a new nightly on AppStore Connect and waits build processing.'
  private_lane :testflight_nightlies do |options|
    platform = options[:platform] || 'iOS'
    service = 'TestFlight'

    build_number = srg_latest_testflight_build_number(appstore_nightly_identifiers, platform)
    build_number = xcode_override_build_number(platform, build_number + 1)

    branch_name = git_branch_name

    notify_build_number_to_ci(platform, nightly_build_name(branch_name))

    changelog = default_changelog_for_nightlies(platform, service)

    schemes = schemes(platform)
    schemes.each_index do |index|
      app_identifier = appstore_nightly_identifiers[index]
      update_app_identifier_to_appstore(platform, app_identifier)

      build_lane(
        configuration: 'Nightly',
        scheme: schemes[index],
        display_name_suffix: nighlty_display_name_suffix(branch_name),
        version_suffix: nightly_version_suffix(branch_name),
        build_name: nightly_build_name(branch_name),
        platform: platform,
        export_to_appstore: true
      )

      srg_pilot(app_identifier, platform, changelog)

      appcenter_appnames = appcenter_testflight_nightly_names(platform)
      update_dsyms(app_identifier, platform, appcenter_appnames[index], nil)

      clean_build_artifacts
      reset_app_identifier_to_appstore(platform)

      UI.message schemes[index] + ' (Nightly ' + build_number + ') delivered. ✅'
    end

    save_last_nightlies_success_git_commit_hash(platform, service)
  end

  desc 'Builds a new beta on AppStore Connect with the current build number and waits build processing. If on the develop branch, tries to tag the current version, then bumps the build number and pushes.'
  private_lane :testflight_betas do |options|
    platform = options[:platform] || 'iOS'

    notify_build_number_to_ci(platform, nil)

    build_number = xcode_build_number(platform)

    schemes = schemes(platform)
    schemes.each_index do |index|
      app_identifier = appstore_beta_identifiers[index]

      can_upload = can_upload_testflight_build(platform, app_identifier)
      UI.message(schemes[index] + ' (Beta ' + build_number + ') already uploaded 🔁 ✅') unless can_upload
      next unless can_upload

      update_app_identifier_to_appstore(platform, app_identifier)

      build_lane(
        configuration: 'Beta',
        scheme: schemes[index],
        display_name_suffix: ' 🎯',
        version_suffix: '-beta',
        platform: platform,
        export_to_appstore: true
      )

      srg_pilot(app_identifier, platform, what_s_new_for_beta(platform))

      appcenter_appnames = appcenter_testflight_beta_names(platform)
      update_dsyms(app_identifier, platform, appcenter_appnames[index], nil)

      clean_build_artifacts
      reset_app_identifier_to_appstore(platform)

      UI.message schemes[index] + ' (Beta ' + build_number + ') delivered. ✅'
    end

    bump_build_number_beta_workflow(platform)
  end

  desc 'Builds and uploads to TestFlight'
  private_lane :testflight_lane do |options|
    options[:platform] ||= 'iOS'
    build_number = xcode_build_number(options[:platform])

    can_upload = can_upload_testflight_build(options[:platform], nil)
    UI.message(options[:scheme] + ' (' + options[:platform] + ') ' + build_number + ' already uploaded 🔁 ✅') unless can_upload
    next unless can_upload

    build_lane(
      configuration: 'AppStore',
      scheme: options[:scheme],
      platform: options[:platform],
      export_to_appstore: true
    )

    login_with_app_store_connect_api_key
    pilot(
      app_platform: appstore_platform(options[:platform]),
      skip_waiting_for_build_processing: true
    )
    UI.message(options[:scheme] + ' (' + options[:platform] + ') ' + build_number + ' uploaded ✅')

    clean_build_artifacts
  end

  desc 'Builds for a scheme and a configuration'
  private_lane :build_lane do |options|
    options[:export_to_appstore] ||= false
    options[:display_name_suffix] ||= ''
    options[:version_suffix] ||= ''
    options[:build_name] ||= ''
    options[:platform] ||= 'iOS'
    options[:version] = xcode_marketing_version(options[:platform])

    options = update_options_to_appstore(options)

    options[:team_id] = app_config.try_fetch_value(:team_id)

    destination = 'generic/platform=' + options[:platform]
    lane_name = lane_context[SharedValues::LANE_NAME]
    output_directory = 'fastlane/export/' + lane_name + '/'
    gym(
      configuration: options[:configuration],
      scheme: options[:scheme],
      silent: true,
      clean: true,
      xcargs: srg_xcargs(options),
      export_method: options[:export_to_appstore] ? 'app-store' : 'enterprise',
      include_bitcode: options[:export_to_appstore],
      export_team_id: options[:team_id],
      destination: destination,
      derived_data_path: derived_data_path,
      output_directory: output_directory
    )
  end

  desc 'Uploads a build on App Center or just a dSYM file'
  private_lane :appcenter_lane do |options|
    options[:notify_testers] ||= false

    if options[:upload_dsym]
      appcenter_upload(
        api_token: ENV['PLAY_APPCENTER_TOKEN'],
        owner_type: 'organization',
        owner_name: ENV['PLAY_APPCENTER_OWNER'],
        app_name: options[:appname],
        release_notes: options[:notes],
        upload_dsym_only: true,
        dsym: options[:upload_dsym]
      )
    else
      appcenter_upload(
        api_token: ENV['PLAY_APPCENTER_TOKEN'],
        owner_type: 'organization',
        owner_name: ENV['PLAY_APPCENTER_OWNER'],
        app_name: options[:appname],
        release_notes: options[:notes],
        destination_type: 'group',
        destinations: options[:destinations],
        notify_testers: options[:notify_testers]
      )
    end
  end

  desc 'Add tester to TestFlight, by default for betas'
  private_lane :addTestFlightTester do |options|
    email = spaceship_email_required(options[:email])
    email ||= spaceship_email_required(prompt(text: 'email: '))
    return UI.user_error!('A valid email is required. (email parameter)') unless email

    UI.message('Preparing invitations to ' + email + '. 📩')

    app_identifiers = options[:app_identifiers] || appstore_beta_identifiers
    group_name = options[:group_name] || ENV['ITUNES_CONNECT_TESTFLIGHT_GROUPS']

    spaceship_login

    app_identifiers.each do |app_identifier|
      app = spaceship_app(app_identifier)
      next unless app

      group = spaceship_get_group(app, group_name)
      next unless group

      tester = spaceship_get_tester(app, email)
      if tester
        if tester.status == 'invited'
          spaceship_delete_tester(app, tester)
          UI.message(email + ' was invited as a tester for ' + app.name + '. Invitation removed. 📨 🚮')
        else # accepted or installed
          UI.message(email + ' is already a tester for ' + app.name + ' (status: ' + tester.status + '). 🔁 ✅')
          next
        end
      end

      spaceship_add_tester(group, email, options[:first_name], options[:last_name])

      UI.message email + ' tester added to ' + group.name + ' for ' + app.name + '. Invitation sent. 📨 ✅'
    end
  end

  after_all do |lane|
    if cleaned_lane_condition(lane)
      ENV.delete('DERIVED_DATA_CLEANED')
      reset_git_repo(skip_clean: true)
    end

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane|
    if cleaned_lane_condition(lane)
      clean_build_artifacts
      ENV.delete('DERIVED_DATA_CLEANED')
      reset_git_repo(skip_clean: true, force: true)
    end

    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

def app_config
  CredentialsManager::AppfileConfig
end

def cleaned_lane_condition(lane)
  (lane.to_s != 'devLane') &&
    (!lane.to_s.downcase.include? 'dsym') &&
    (!lane.to_s.downcase.include? 'tester') &&
    (!lane.to_s.downcase.include? 'screenshots')
end

def skip_clean_derived_data
  ENV['DERIVED_DATA_CLEANED'] == '1'
end

def clean_derived_data
  Dir.chdir('..') { FileUtils.remove_entry(derived_data_path, true) }
  ENV['DERIVED_DATA_CLEANED'] = '1'
end

def derived_data_path
  'build/DerivedData'
end

def ios_schemes
  ['Play SWI', 'Play RTS', 'Play SRF', 'Play RSI', 'Play RTR']
end

def tvos_schemes
  ['Play SWI TV', 'Play RTS TV', 'Play SRF TV', 'Play RSI TV', 'Play RTR TV']
end

def schemes(platform)
  platform ||= 'iOS'

  if platform == 'iOS'
    ios_schemes
  else
    tvos_schemes
  end
end

def appcenter_nightly_names
  [ENV['PLAY_SWI_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_RTS_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_SRF_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_RSI_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_RTR_NIGHTLY_APPCENTER_APPNAME']]
end

def appcenter_tv_nightly_names
  [ENV['PLAY_SWI_TV_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_RTS_TV_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_SRF_TV_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_RSI_TV_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_RTR_TV_NIGHTLY_APPCENTER_APPNAME']]
end

def appcenter_ios_nightly_names
  [ENV['PLAY_SWI_IOS_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_RTS_IOS_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_SRF_IOS_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_RSI_IOS_NIGHTLY_APPCENTER_APPNAME'],
   ENV['PLAY_RTR_IOS_NIGHTLY_APPCENTER_APPNAME']]
end

def appcenter_testflight_nightly_names(platform)
  platform ||= 'iOS'

  if platform == 'iOS'
    appcenter_ios_nightly_names
  else
    appcenter_tv_nightly_names
  end
end

def appcenter_beta_names
  [ENV['PLAY_SWI_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_RTS_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_SRF_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_RSI_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_RTR_BETA_APPCENTER_APPNAME']]
end

def appcenter_tv_beta_names
  [ENV['PLAY_SWI_TV_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_RTS_TV_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_SRF_TV_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_RSI_TV_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_RTR_TV_BETA_APPCENTER_APPNAME']]
end

def appcenter_ios_beta_names
  [ENV['PLAY_SWI_IOS_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_RTS_IOS_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_SRF_IOS_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_RSI_IOS_BETA_APPCENTER_APPNAME'],
   ENV['PLAY_RTR_IOS_BETA_APPCENTER_APPNAME']]
end

def appcenter_testflight_beta_names(platform)
  platform ||= 'iOS'

  if platform == 'iOS'
    appcenter_ios_beta_names
  else
    appcenter_tv_beta_names
  end
end

def appstore_nightly_identifiers
  [ENV['ITUNES_CONNECT_NIGHLTY_SWI_APP_IDENTIFIER'],
   ENV['ITUNES_CONNECT_NIGHLTY_RTS_APP_IDENTIFIER'],
   ENV['ITUNES_CONNECT_NIGHLTY_SRF_APP_IDENTIFIER'],
   ENV['ITUNES_CONNECT_NIGHLTY_RSI_APP_IDENTIFIER'],
   ENV['ITUNES_CONNECT_NIGHLTY_RTR_APP_IDENTIFIER']]
end

def appstore_beta_identifiers
  [ENV['ITUNES_CONNECT_BETA_SWI_APP_IDENTIFIER'],
   ENV['ITUNES_CONNECT_BETA_RTS_APP_IDENTIFIER'],
   ENV['ITUNES_CONNECT_BETA_SRF_APP_IDENTIFIER'],
   ENV['ITUNES_CONNECT_BETA_RSI_APP_IDENTIFIER'],
   ENV['ITUNES_CONNECT_BETA_RTR_APP_IDENTIFIER']]
end

def appstore_team_api_key_prefixs
  { ENV['SWI_ITUNES_CONNECT_TEAM_ID'] => 'SWI',
    ENV['RTS_ITUNES_CONNECT_TEAM_ID'] => 'RTS',
    ENV['SRF_ITUNES_CONNECT_TEAM_ID'] => 'SRF',
    ENV['RSI_ITUNES_CONNECT_TEAM_ID'] => 'RSI',
    ENV['SRGSSR_ITUNES_CONNECT_TEAM_ID'] => 'SRGSSR' } # RTR is in SRG SSR ASC team
end

# Returns current tag version
def tag_version(platform)
  xcode_marketing_version(platform) + '-' + xcode_build_number(platform)
end

def srg_tag(platform)
  platform.downcase + '/' + tag_version(platform)
end

# Returns the what's new text from WhatsNew-beta.json file in the repository
def what_s_new_for_beta(platform)
  file = File.open('../WhatsNew-' + platform + '-beta.json', 'r')
  json = JSON.parse(file.read)
  file.close
  what_s_new = json[tag_version(platform)]
  what_s_new || ''
end

# Characters "-" or "+" in version are not allowed on AppStore Connect.
def update_options_to_appstore(options)
  return options unless options[:export_to_appstore]

  options[:version_suffix] = ''
  version = options[:version]
  index = version.index('-')
  return options unless index

  options[:version] = version[0..index - 1]
  options
end

def srg_xcargs(options)
  export_to_appstore = options[:export_to_appstore] || false
  xcargs = export_to_appstore ? 'ENABLE_BITCODE=YES' : 'ENABLE_BITCODE=NO'
  xcargs += " BUNDLE_DISPLAY_NAME_SUFFIX='#{options[:display_name_suffix]}'"
  xcargs += " MARKETING_VERSION='#{options[:version]}'"
  xcargs += " MARKETING_VERSION_SUFFIX='#{options[:version_suffix]}'"
  xcargs += " BUILD_NAME='#{options[:build_name]}'"
  xcargs += " DEVELOPMENT_TEAM='#{options[:team_id]}'"
  xcargs + ' -allowProvisioningUpdates'
end

def nighlty_display_name_suffix(branch_name)
  nighlty_display_name_suffix = ' 🌙'
  nighlty_display_name_suffix = ' 🌿' if branch_name.include? 'feature/'
  nighlty_display_name_suffix
end

def nightly_version_suffix(branch_name)
  nightly_version_suffix = '-nightly'
  if branch_name.include? 'feature/'
    nightly_version_suffix += '+' + branch_name.sub('feature/', '').strip
  end
  nightly_version_suffix
end

def nightly_build_name(branch_name)
  if branch_name.include? 'feature/'
    branch_name.sub('feature/', '').strip
  else
    ''
  end
end

# Return a default changelog for nightlies
def default_changelog_for_nightlies(platform, service)
  last_commit_hash = last_nightlies_success_git_commit_hash(platform, service)
  last_commit_hash = 'HEAD^^^^^' if last_commit_hash.length < 12

  changelog = changelog_from_git_commits(
    between: [last_commit_hash, 'HEAD'],
    pretty: '- %s'
  )

  # HAX: strip emoji from changelog
  changelog = changelog ? changelog.sub(/[\u{1F300}-\u{1F6FF}]/, '').lstrip : ''
  changelog = 'No change log found for this build.' if changelog.length.zero?
  Actions.lane_context[SharedValues::FL_CHANGELOG] = changelog
end

# Save the git commit hash in a local text file for nightlies
def save_last_nightlies_success_git_commit_hash(platform, service)
  last = last_git_commit
  platform = platform ? platform.downcase + '-' : ''
  service = service ? service.downcase + '-' : ''
  file_name = 'last-' + service + platform + 'nightlies-success-git-commit-hash.txt'
  File.open(file_name, 'w') { |f| f.write(last[:commit_hash]) }
  last[:commit_hash]
end

# Read the git commit hash in a local text file for nightlies
def last_nightlies_success_git_commit_hash(platform, service)
  platform = platform ? platform.downcase + '-' : ''
  service = service ? service.downcase + '-' : ''
  file_name = 'last-' + service + platform + 'nightlies-success-git-commit-hash.txt'
  file = File.open(file_name, 'a+')
  nightlies_success_git_commit_hash = file.read
  file.close
  nightlies_success_git_commit_hash
end

# Returns the marketing version for a platform, without suffix
def xcode_marketing_version(platform)
  get_xcconfig_value(
    path: 'Xcode/Play ' + platform + '.xcconfig',
    name: 'MARKETING_VERSION'
  )
end

# Returns the build number for a platform
def xcode_build_number(platform)
  get_xcconfig_value(
    path: 'Xcode/Play ' + platform + '.xcconfig',
    name: 'CURRENT_PROJECT_VERSION'
  )
end

# Override build number for a platform (current project version)
def xcode_override_build_number(platform, build_number)
  update_xcconfig_value(
    path: 'Xcode/Play ' + platform + '.xcconfig',
    name: 'CURRENT_PROJECT_VERSION',
    value: build_number.to_s
  )
  build_number.to_s
end

def appstore_platform(platform)
  appstore_platforms = { 'iOS' => 'ios', 'tvOS' => 'appletvos' }
  appstore_platforms[platform]
end

def login_with_app_store_connect_api_key
  itc_team_id = app_config.try_fetch_value(:itc_team_id)
  key_prefix = appstore_team_api_key_prefixs[itc_team_id]

  app_store_connect_api_key(
    key_id: ENV[key_prefix + '_APPSTORE_CONNECT_API_KEY_ID'],
    issuer_id: ENV[key_prefix + '_APPSTORE_CONNECT_API_KEY_ISSUER_ID'],
    key_content: ENV[key_prefix + '_APPSTORE_CONNECT_API_KEY_CONTENT']
  )
end

# Update the app and app group identifiers for App Store Connect submit.
def update_app_identifier_to_appstore(platform, app_identifier)
  update_xcconfig_value(
    path: 'Xcode/Play ' + platform + ' Application.xcconfig',
    name: 'PRODUCT_BUNDLE_IDENTIFIER',
    value: app_identifier
  )
  set_xcconfig_value(
    path: 'Xcode/Play ' + platform + ' Application.xcconfig',
    name: 'APP_GROUP_IDENTIFIER',
    value: 'group.' + app_identifier
  )
  update_notification_service_extension_identifier_to_appstore(platform, app_identifier)
  app_identifier
end

# Update the extension and app group identifiers for App Store Connect submit.
def update_notification_service_extension_identifier_to_appstore(platform, app_identifier)
  return unless platform == 'iOS'

  update_xcconfig_value(
    path: 'Xcode/Play ' + platform + ' Notification Service Extension.xcconfig',
    name: 'PRODUCT_BUNDLE_IDENTIFIER',
    value: app_identifier + '.notification-service-extension'
  )
  set_xcconfig_value(
    path: 'Xcode/Play ' + platform + ' Notification Service Extension.xcconfig',
    name: 'APP_GROUP_IDENTIFIER',
    value: 'group.' + app_identifier
  )
end

def srg_pilot(app_identifier, platform, changelog)
  login_with_app_store_connect_api_key
  pilot(
    app_identifier: app_identifier,
    app_platform: appstore_platform(platform),
    changelog: changelog,
    # distribute_external: true,
    # groups: ENV['ITUNES_CONNECT_TESTFLIGHT_GROUPS'],
    demo_account_required: false,
    beta_app_review_info: beta_app_review_info
  )
end

# Reset the updated app identifier after App Store Connect submission.
def reset_app_identifier_to_appstore(platform)
  reset_git_repo(
    force: true,
    files: ['Xcode/Play ' + platform + ' Application.xcconfig']
  )

  return unless platform == 'iOS'

  reset_git_repo(
    force: true,
    files: ['Xcode/Play ' + platform + ' Notification Service Extension.xcconfig']
  )
end

# Update dSYMs from AppStore to App Center.
def update_dsyms(app_identifier, platform, appcenter_appname, options)
  app_identifier ||= app_config.try_fetch_value(:app_identifier)
  platform ||= 'iOS'
  output_directory = 'fastlane/export/' + lane_context[SharedValues::LANE_NAME]
  Dir.chdir('..') { FileUtils.mkdir_p(output_directory) }

  try_update_dsyms(app_identifier, platform, appcenter_appname, options, output_directory)
end

def try_update_dsyms(app_identifier, platform, appcenter_appname, options, output_directory)
  min_version = options ? options[:min_version] : nil
  version = options ? options[:version] : nil
  begin
    download_appstore_dsyms(app_identifier, platform, min_version, version, output_directory)
    upload_appcenter_dsyms(appcenter_appname)
    lane_context.delete(SharedValues::DSYM_PATHS)
  rescue StandardError => e
    UI.important('Update dSYMs failed (' + platform + ' / ' + appcenter_appname + '). ⚠️')
    UI.error(e.message)
  end
end

def download_appstore_dsyms(app_identifier, platform, min_version, version, output_directory)
  app_identifier ||= app_config.try_fetch_value(:app_identifier)
  platform ||= 'iOS'
  version ||= 'latest'

  # download_dsyms does not support api key token yet.
  # See https://github.com/fastlane/fastlane/discussions/17485
  # login_with_app_store_connect_api_key
  download_dsyms(
    app_identifier: app_identifier,
    platform: appstore_platform(platform),
    min_version: min_version,
    version: !min_version ? version : nil,
    output_directory: output_directory,
    wait_for_dsym_processing: true,
    wait_timeout: 90
  )
end

def upload_appcenter_dsyms(appcenter_appname)
  lane_context[SharedValues::DSYM_PATHS]&.each do |dsym|
    appcenter_lane(
      appname: appcenter_appname,
      notes: 'DSYMs from AppStore Connect (via fastlane).',
      upload_dsym: dsym
    )
  end
end

# Share build number to the continuous integration
def notify_build_number_to_ci(platform, build_name)
  return unless ENV['TEAMCITY_VERSION']

  displayed_build_number = xcode_marketing_version(platform)
  displayed_build_number += '-' + xcode_build_number(platform)
  displayed_build_number += '+' + build_name if build_name
  puts '##teamcity[buildNumber \'' + displayed_build_number + '\']'
end

# Returns current build number on App Center
def latest_appcenter_build_number(app_names)
  build_number = 0
  app_names.each_index do |index|
    number = Integer(appcenter_fetch_version_number(
      api_token: ENV['PLAY_APPCENTER_TOKEN'],
      owner_name: ENV['PLAY_APPCENTER_OWNER'],
      app_name: app_names[index]
    )['build_number'])

    build_number = number unless build_number >= number
  end
  build_number
end

# Returns current build number on AppStore Connect
def srg_latest_testflight_build_number(app_identifiers, platform)
  login_with_app_store_connect_api_key

  build_number = 0
  app_identifiers.each_index do |index|
    number = latest_testflight_build_number(
      platform: appstore_platform(platform),
      app_identifier: app_identifiers[index]
    )

    build_number = number unless build_number >= number
  end
  build_number
end

# Create screenshots for AppStoreConnect.
def screenshots(platform, scheme, languages)
  platform ||= 'iOS'
  output_directory = 'fastlane/export/' + lane_context[SharedValues::LANE_NAME]
  Dir.chdir('..') { FileUtils.mkdir_p(output_directory) }

  snapshot(
    scheme: scheme,
    languages: languages,
    devices: snapshot_devices(platform),
    derived_data_path: derived_data_path,
    output_directory: output_directory
  )
end

def upload_screenshots(platform)
  platform ||= 'iOS'

  login_with_app_store_connect_api_key
  deliver(
    platform: appstore_platform(platform),
    app_version: xcode_marketing_version(platform),
    skip_binary_upload: true,
    skip_metadata: true,
    overwrite_screenshots: true,
    precheck_include_in_app_purchases: false,
    force: true # Don't stop to wait manual preview
  )
end

def can_upload_testflight_build(platform, app_identifier)
  platform ||= 'iOS'
  app_identifier ||= app_config.try_fetch_value(:app_identifier)

  login_with_app_store_connect_api_key
  appstore_build_number = latest_testflight_build_number(
    platform: appstore_platform(platform),
    app_identifier: app_identifier
  )
  local_build_number = xcode_build_number(platform)

  (appstore_build_number < local_build_number.to_i)
end

# Beta workflow: tag the new beta, bump build number and push to the repository,
# only if we are on the develop branch and the tag does not already exist.
def bump_build_number_beta_workflow(platform)
  return unless git_branch_name.include? 'develop'

  tag = srg_tag(platform)

  git_pull(only_tags: true)
  if !git_tag_exists(tag: tag)
    srg_add_tag_and_bump_build_number(platform, tag)
    UI.message('Tag "' + tag + '" created. ✅')
  else
    UI.important('Tag "' + tag + '" already exists. Probably done by an other build (to AppCenter, to TestFlight or did it manually). ⚠️')
  end
end

def srg_add_tag_and_bump_build_number(platform, tag)
  add_git_tag(tag: tag)
  bump_build_number_commit(platform)
  git_pull(rebase: true)
  push_to_git_remote
end

def bump_build_number_commit(platform)
  build_number = xcode_override_build_number(platform, xcode_build_number(platform).to_i + 1)
  commit_version_bump(
    xcodeproj: 'PlaySRG.xcodeproj',
    message: 'Bump ' + platform + ' build number to ' + build_number,
    include: 'Xcode/Play ' + platform + '.xcconfig',
    ignore: /.+/
  )
end

def git_branch_name
  sh "git branch | grep \\* | cut -d ' ' -f2"
end

def beta_app_review_info
  {
    contact_email: ENV['ITUNES_CONNECT_REVIEW_EMAIL'],
    contact_first_name: ENV['ITUNES_CONNECT_REVIEW_FIRST_NAME'],
    contact_last_name: ENV['ITUNES_CONNECT_REVIEW_LAST_NAME'],
    contact_phone: ENV['ITUNES_CONNECT_REVIEW_PHONE']
  }
end

def snapshot_devices(platform)
  platform ||= 'iOS'

  if platform == 'iOS'
    snapshot_ios_devices
  else
    snapshot_tvos_devices
  end
end

def snapshot_ios_devices
  [
    'iPhone 12 Pro Max', # 6.5 inch, required
    'iPhone 8 Plus', # 5.5 inch, required
    'iPad Pro (12.9-inch) (4th generation)', # 12.9 inch, required
    'iPad Pro (12.9-inch) (2nd generation)' # 12.9 inch, required
  ]
end

def snapshot_tvos_devices
  [
    'Apple TV'
  ]
end

def spaceship_login
  ENV['FASTLANE_ITC_TEAM_ID'] = app_config.try_fetch_value(:itc_team_id)
  Spaceship::Tunes.login
  Spaceship::Tunes.select_team
end

def spaceship_email_required(email)
  return if !email || (email.strip !~ URI::MailTo::EMAIL_REGEXP)

  email.strip
end

def spaceship_app(app_identifier)
  app = Spaceship::ConnectAPI::App.find(app_identifier)
  UI.message(app_identifier + ' app does not exist. ⚠️') unless app
  app
end

def spaceship_get_group(app, group_name)
  group = app.get_beta_groups(filter: { name: group_name }).first
  UI.message(group_name + ' group does not exist for ' + app.name + '. ⚠️') unless group
  group
end

def spaceship_get_tester(app, email)
  Spaceship::TestFlight::Tester.search(app_id: app.id, text: email).first
end

def spaceship_delete_tester(app, tester)
  Spaceship::ConnectAPI.delete_beta_tester_from_apps(
    beta_tester_id: tester.tester_id,
    app_ids: [app.id]
  )
end

def spaceship_new_tester(email, first_name, last_name)
  { email: email, firstName: first_name, lastName: last_name }
end

def spaceship_add_tester(group, email, first_name, last_name)
  tester = spaceship_new_tester(email, first_name, last_name)
  group.post_bulk_beta_tester_assignments(beta_testers: [tester])
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
